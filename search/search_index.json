{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"1. Theoretical Foundation: Equations of Projectile Motion 1.1 Overview Projectile motion describes the two-dimensional motion of an object launched into the air, subject only to the force of gravity (ideal case). The motion can be analyzed using Newton's Second Law and decomposed into horizontal and vertical components. 1.2 Newton\u2019s Second Law Newton\u2019s Second Law in vector form: \\[\\vec{F}=m\\vec{a}\\] For projectile motion without air resistance, the only force acting on the body is gravity: \\[\\vec{F}=-mg\\hat{j} \\Rightarrow \\vec{a}=-g\\hat{j}\\] 1.3 Decomposing the Motion Let: - \\(v_0\\) : initial velocity - \\(\\theta\\) : angle of projection from the horizontal - \\(v_{0x}=v_0\\cos\\theta\\) : initial velocity in the x-direction - \\(v_{0y}=v_0\\sin\\theta\\) : initial velocity in the y-direction - \\(g\\) : acceleration due to gravity 1.4 Solving Differential Equations of Motion Horizontal Motion The horizontal acceleration is zero ( \\(a_x=0\\) ): \\[\\frac{d^2x}{dt^2}=0 \\Rightarrow \\frac{dx}{dt}=v_{0x} \\Rightarrow x(t)=v_{0x}t\\] Thus, \\[x(t)=v_0\\cos\\theta\\cdot t\\] Vertical Motion The vertical acceleration is \\(a_y=-g\\) : \\[\\frac{d^2y}{dt^2}=-g \\Rightarrow \\frac{dy}{dt}=v_{0y}-gt \\Rightarrow y(t)=v_{0y}t-\\frac{1}{2}gt^2\\] So, \\[y(t)=v_0\\sin\\theta\\cdot t - \\frac{1}{2}gt^2\\] 1.5 Parametric Equations of Motion The full motion is described by: \\[x(t)=v_0\\cos\\theta\\cdot t$$ $$y(t)=v_0\\sin\\theta\\cdot t - \\frac{1}{2}gt^2\\] These form a parabolic trajectory when \\(y\\) is expressed in terms of \\(x\\) . 1.6 Family of Solutions with Varying Initial Conditions Let\u2019s explore how different parameters affect the trajectory: 1.6.1 Varying Initial Velocity \\(v_0\\) Larger \\(v_0\\) increases both range and maximum height. The time of flight also increases. 1.6.2 Varying Angle \\(\\theta\\) The range is maximized at \\(\\theta=45^\\circ\\) (under symmetric conditions). Complementary angles \\(\\theta\\) and \\(90^\\circ-\\theta\\) 2. Analysis of the Range 2.1 Horizontal Range of a Projectile The range \\(R\\) of a projectile is the horizontal distance it travels before returning to the same vertical level from which it was launched. We start from the horizontal and vertical motion equations: Horizontal displacement: \\( \\(x(t)=v_0\\cos\\theta\\cdot t\\) \\) Vertical displacement: \\( \\(y(t)=v_0\\sin\\theta\\cdot t-\\frac{1}{2}gt^2\\) \\) Assuming the projectile lands at the same height it was launched ( \\(y=0\\) ), solve for time of flight \\(T\\) : \\[ 0=v_0\\sin\\theta\\cdot T-\\frac{1}{2}gT^2 \\\\ \\Rightarrow T=\\frac{2v_0\\sin\\theta}{g} \\] Substitute \\(T\\) into \\(x(T)\\) to find the range : \\[ R=x(T)=v_0\\cos\\theta\\cdot\\frac{2v_0\\sin\\theta}{g}=\\frac{v_0^2\\sin(2\\theta)}{g} \\] 2.2 Dependence of Range on the Angle of Projection The range is given by: \\[R=\\frac{v_0^2\\sin(2\\theta)}{g}\\] Key observations: \\(\\sin(2\\theta)\\) is maximum when \\(2\\theta=90^\\circ\\Rightarrow\\theta=45^\\circ\\) . For a fixed initial speed \\(v_0\\) , the range is symmetric with respect to \\(\\theta=45^\\circ\\) . i.e., \\(\\theta\\) and \\((90^\\circ-\\theta)\\) give the same range. This relationship forms a sine curve when plotted against \\(\\theta\\) from \\(0^\\circ\\) to \\(90^\\circ\\) . 2.3 Influence of Other Parameters 2.3.1 Initial Velocity \\(v_0\\) Range increases quadratically with initial velocity: \\[R\\propto v_0^2\\] Doubling \\(v_0\\) quadruples the range. 2.3.2 Gravitational Acceleration \\(g\\) Range is inversely proportional to gravity: \\[R\\propto\\frac{1}{g}\\] Higher gravity results in a shorter range (e.g., on Jupiter vs. Moon). 2.4 Maximum Range Condition To maximize \\(R\\) , we analyze: \\[R=\\frac{v_0^2\\sin(2\\theta)}{g}\\] The sine function has its maximum at \\(2\\theta=90^\\circ\\) , so: \\[ \\boxed{\\theta_\\text{max}=45^\\circ} \\] This angle gives the maximum possible horizontal range under the assumption that the launch and landing heights are equal and air resistance is negligible. 2.5 Graphical Insight A plot of \\(R\\) vs. \\(\\theta\\) for a fixed \\(v_0\\) and \\(g\\) would show: A symmetric curve peaking at \\(\\theta=45^\\circ\\) . The curve follows the form of \\(\\sin(2\\theta)\\) . This reinforces the analytical result. 2.6 Summary Parameter Influence on Range Launch angle \\(\\theta\\) \\(R\\) maximized at \\(45^\\circ\\) ; symmetric for \\(\\theta\\) and \\(90^\\circ-\\theta\\) Initial speed \\(v_0\\) \\(R\\propto v_0^2\\) Gravity \\(g\\) \\(R\\propto\\frac{1}{g}\\) The analysis shows that range is a function of trigonometric behavior and quadratic scaling, influenced by both kinematic input and environmental factors. 3. Practical Applications Projectile motion is not only a theoretical construct but also highly relevant in many real-world contexts. While the basic model assumes ideal conditions, it forms the foundation upon which more complex and realistic models can be built. 3.1 Applications in Real-World Scenarios 3.1.1 Sports In sports like football, basketball, or golf, players rely on instinct and experience to control initial velocity \\(v_0\\) and launch angle \\(\\theta\\) to achieve a desired range or height. For example: In basketball, to make a successful shot: The player must optimize \\(\\theta\\) depending on distance from the hoop. The parabolic trajectory is described by: \\[y(x)=x\\tan\\theta-\\frac{gx^2}{2v_0^2\\cos^2\\theta}\\] In soccer, goalkeepers estimate the projectile path of a shot to determine interception points. 3.1.2 Engineering and Ballistics Projectile motion governs: The trajectory of artillery shells Rocket launches during early flight phases Throwing mechanisms in robotics or machines Adjusting parameters like \\(v_0\\) , \\(\\theta\\) , and launch height \\(h\\) are critical for targeting. 3.1.3 Terrain and Uneven Ground When landing elevation differs from launch elevation, time of flight and range change. Assuming launch height \\(h>0\\) , vertical motion becomes: \\[ y(t)=h+v_0\\sin\\theta\\cdot t-\\frac{1}{2}gt^2 \\] Solving for the time \\(T\\) when \\(y(T)=0\\) gives: \\[ T=\\frac{v_0\\sin\\theta+\\sqrt{(v_0\\sin\\theta)^2+2gh}}{g} \\] Then the range is: \\[ R=v_0\\cos\\theta\\cdot T \\] This model is closer to real-world launches, like a drone dropped from a height or skiing off a slope. 3.2 Air Resistance and Drag In realistic scenarios, air resistance affects motion significantly, especially at high speeds. 3.2.1 Drag Force Model A basic drag model (linear with velocity): \\[ F_d=-kv \\] Where: \\(k\\) is the drag coefficient, \\(v\\) is the velocity vector. This leads to nonlinear differential equations: Horizontal: \\( \\(m\\frac{dv_x}{dt}=-kv_x\\) \\) Vertical: \\( \\(m\\frac{dv_y}{dt}=-mg-kv_y\\) \\) Solving these yields exponentially decaying velocities : \\[ v_x(t)=v_{0x}e^{-kt/m},\\quad v_y(t)=\\left(v_{0y}+\\frac{mg}{k}\\right)e^{-kt/m}-\\frac{mg}{k} \\] This results in: A shorter range A steeper descent Asymmetry in the trajectory path 3.3 Why the Idealized Model Fails 3.3.1 Assumptions in the Ideal Model No air resistance Flat, level ground Constant gravitational field No spin or lift forces Point-mass projectile These assumptions simplify analysis but break down in most physical scenarios. 3.3.2 Realistic Factors Affecting Trajectory Factor Effect on Motion Air resistance Reduces range, alters shape of trajectory Varying terrain Changes landing point and time of flight Wind Can push projectile off-course Altitude Affects air density and gravity slightly Projectile shape/spin Introduces lift forces (e.g., Magnus effect) 3.4 Summary The classical model of projectile motion serves as a first approximation for real systems. However, for accurate prediction and control, especially in sports, aerospace, or engineering, extended models incorporating environmental and mechanical factors are necessary. Despite its limitations, understanding the ideal case is essential before progressing to more complex analyses. Phyton-plot ```python import numpy as np import matplotlib.pyplot as plt Constants g = 9.81 # Gravitational acceleration in m/s^2 Function to calculate the range of a projectile def calculate_range(v0, angle_deg, g=g): angle_rad = np.radians(angle_deg) range_ = (v0**2 * np.sin(2 * angle_rad)) / g return range_ Function to plot range vs angle for different velocities def plot_range_vs_angle(v0_values, g=g): angles = np.linspace(0, 90, 500) # Angles from 0 to 90 degrees plt.figure(figsize=(10, 6)) for v0 in v0_values: ranges = [calculate_range(v0, angle, g) for angle in angles] plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.title('Range vs Angle for Different Initial Velocities') plt.xlabel('Angle (degrees)') plt.ylabel('Range (meters)') plt.legend(title=\"Initial Velocity (m/s)\") plt.grid(True) plt.show() Function to plot range vs velocity for different angles def plot_range_vs_velocity(angle_deg, v0_values, g=g): plt.figure(figsize=(10, 6)) ranges = [calculate_range(v0, angle_deg, g) for v0 in v0_values] plt.plot(v0_values, ranges, label=f'Angle = {angle_deg} degrees') plt.title('Range vs Initial Velocity for a Fixed Angle') plt.xlabel('Initial Velocity (m/s)') plt.ylabel('Range (meters)') plt.legend(title=\"Launch Angle (degrees)\") plt.grid(True) plt.show() User input for initial conditions v0 = float(input(\"Enter initial velocity (m/s): \")) angle = float(input(\"Enter launch angle (degrees): \")) g = float(input(\"Enter gravitational acceleration (m/s^2, default 9.81): \") or 9.81) Simulate and plot range vs angle for different initial velocities v0_values = [10, 20, 30, 40, 50] # Different velocities for comparison plot_range_vs_angle(v0_values) Simulate and plot range vs initial velocity for a fixed angle v0_values = np.linspace(1, 100, 100) plot_range_vs_velocity(angle, v0_values) ``` link","title":"1. Theoretical Foundation: Equations of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation-equations-of-projectile-motion","text":"","title":"1. Theoretical Foundation: Equations of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#11-overview","text":"Projectile motion describes the two-dimensional motion of an object launched into the air, subject only to the force of gravity (ideal case). The motion can be analyzed using Newton's Second Law and decomposed into horizontal and vertical components.","title":"1.1 Overview"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#12-newtons-second-law","text":"Newton\u2019s Second Law in vector form: \\[\\vec{F}=m\\vec{a}\\] For projectile motion without air resistance, the only force acting on the body is gravity: \\[\\vec{F}=-mg\\hat{j} \\Rightarrow \\vec{a}=-g\\hat{j}\\]","title":"1.2 Newton\u2019s Second Law"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#13-decomposing-the-motion","text":"Let: - \\(v_0\\) : initial velocity - \\(\\theta\\) : angle of projection from the horizontal - \\(v_{0x}=v_0\\cos\\theta\\) : initial velocity in the x-direction - \\(v_{0y}=v_0\\sin\\theta\\) : initial velocity in the y-direction - \\(g\\) : acceleration due to gravity","title":"1.3 Decomposing the Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#14-solving-differential-equations-of-motion","text":"","title":"1.4 Solving Differential Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion","text":"The horizontal acceleration is zero ( \\(a_x=0\\) ): \\[\\frac{d^2x}{dt^2}=0 \\Rightarrow \\frac{dx}{dt}=v_{0x} \\Rightarrow x(t)=v_{0x}t\\] Thus, \\[x(t)=v_0\\cos\\theta\\cdot t\\]","title":"Horizontal Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion","text":"The vertical acceleration is \\(a_y=-g\\) : \\[\\frac{d^2y}{dt^2}=-g \\Rightarrow \\frac{dy}{dt}=v_{0y}-gt \\Rightarrow y(t)=v_{0y}t-\\frac{1}{2}gt^2\\] So, \\[y(t)=v_0\\sin\\theta\\cdot t - \\frac{1}{2}gt^2\\]","title":"Vertical Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#15-parametric-equations-of-motion","text":"The full motion is described by: \\[x(t)=v_0\\cos\\theta\\cdot t$$ $$y(t)=v_0\\sin\\theta\\cdot t - \\frac{1}{2}gt^2\\] These form a parabolic trajectory when \\(y\\) is expressed in terms of \\(x\\) .","title":"1.5 Parametric Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#16-family-of-solutions-with-varying-initial-conditions","text":"Let\u2019s explore how different parameters affect the trajectory:","title":"1.6 Family of Solutions with Varying Initial Conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#161-varying-initial-velocity-v_0","text":"Larger \\(v_0\\) increases both range and maximum height. The time of flight also increases.","title":"1.6.1 Varying Initial Velocity \\(v_0\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#162-varying-angle-theta","text":"The range is maximized at \\(\\theta=45^\\circ\\) (under symmetric conditions). Complementary angles \\(\\theta\\) and \\(90^\\circ-\\theta\\)","title":"1.6.2 Varying Angle \\(\\theta\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#21-horizontal-range-of-a-projectile","text":"The range \\(R\\) of a projectile is the horizontal distance it travels before returning to the same vertical level from which it was launched. We start from the horizontal and vertical motion equations: Horizontal displacement: \\( \\(x(t)=v_0\\cos\\theta\\cdot t\\) \\) Vertical displacement: \\( \\(y(t)=v_0\\sin\\theta\\cdot t-\\frac{1}{2}gt^2\\) \\) Assuming the projectile lands at the same height it was launched ( \\(y=0\\) ), solve for time of flight \\(T\\) : \\[ 0=v_0\\sin\\theta\\cdot T-\\frac{1}{2}gT^2 \\\\ \\Rightarrow T=\\frac{2v_0\\sin\\theta}{g} \\] Substitute \\(T\\) into \\(x(T)\\) to find the range : \\[ R=x(T)=v_0\\cos\\theta\\cdot\\frac{2v_0\\sin\\theta}{g}=\\frac{v_0^2\\sin(2\\theta)}{g} \\]","title":"2.1 Horizontal Range of a Projectile"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#22-dependence-of-range-on-the-angle-of-projection","text":"The range is given by: \\[R=\\frac{v_0^2\\sin(2\\theta)}{g}\\]","title":"2.2 Dependence of Range on the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#key-observations","text":"\\(\\sin(2\\theta)\\) is maximum when \\(2\\theta=90^\\circ\\Rightarrow\\theta=45^\\circ\\) . For a fixed initial speed \\(v_0\\) , the range is symmetric with respect to \\(\\theta=45^\\circ\\) . i.e., \\(\\theta\\) and \\((90^\\circ-\\theta)\\) give the same range. This relationship forms a sine curve when plotted against \\(\\theta\\) from \\(0^\\circ\\) to \\(90^\\circ\\) .","title":"Key observations:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#23-influence-of-other-parameters","text":"","title":"2.3 Influence of Other Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#231-initial-velocity-v_0","text":"Range increases quadratically with initial velocity: \\[R\\propto v_0^2\\] Doubling \\(v_0\\) quadruples the range.","title":"2.3.1 Initial Velocity \\(v_0\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#232-gravitational-acceleration-g","text":"Range is inversely proportional to gravity: \\[R\\propto\\frac{1}{g}\\] Higher gravity results in a shorter range (e.g., on Jupiter vs. Moon).","title":"2.3.2 Gravitational Acceleration \\(g\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#24-maximum-range-condition","text":"To maximize \\(R\\) , we analyze: \\[R=\\frac{v_0^2\\sin(2\\theta)}{g}\\] The sine function has its maximum at \\(2\\theta=90^\\circ\\) , so: \\[ \\boxed{\\theta_\\text{max}=45^\\circ} \\] This angle gives the maximum possible horizontal range under the assumption that the launch and landing heights are equal and air resistance is negligible.","title":"2.4 Maximum Range Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#25-graphical-insight","text":"A plot of \\(R\\) vs. \\(\\theta\\) for a fixed \\(v_0\\) and \\(g\\) would show: A symmetric curve peaking at \\(\\theta=45^\\circ\\) . The curve follows the form of \\(\\sin(2\\theta)\\) . This reinforces the analytical result.","title":"2.5 Graphical Insight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#26-summary","text":"Parameter Influence on Range Launch angle \\(\\theta\\) \\(R\\) maximized at \\(45^\\circ\\) ; symmetric for \\(\\theta\\) and \\(90^\\circ-\\theta\\) Initial speed \\(v_0\\) \\(R\\propto v_0^2\\) Gravity \\(g\\) \\(R\\propto\\frac{1}{g}\\) The analysis shows that range is a function of trigonometric behavior and quadratic scaling, influenced by both kinematic input and environmental factors.","title":"2.6 Summary"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Projectile motion is not only a theoretical construct but also highly relevant in many real-world contexts. While the basic model assumes ideal conditions, it forms the foundation upon which more complex and realistic models can be built.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#31-applications-in-real-world-scenarios","text":"","title":"3.1 Applications in Real-World Scenarios"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#311-sports","text":"In sports like football, basketball, or golf, players rely on instinct and experience to control initial velocity \\(v_0\\) and launch angle \\(\\theta\\) to achieve a desired range or height. For example: In basketball, to make a successful shot: The player must optimize \\(\\theta\\) depending on distance from the hoop. The parabolic trajectory is described by: \\[y(x)=x\\tan\\theta-\\frac{gx^2}{2v_0^2\\cos^2\\theta}\\] In soccer, goalkeepers estimate the projectile path of a shot to determine interception points.","title":"3.1.1 Sports"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#312-engineering-and-ballistics","text":"Projectile motion governs: The trajectory of artillery shells Rocket launches during early flight phases Throwing mechanisms in robotics or machines Adjusting parameters like \\(v_0\\) , \\(\\theta\\) , and launch height \\(h\\) are critical for targeting.","title":"3.1.2 Engineering and Ballistics"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#313-terrain-and-uneven-ground","text":"When landing elevation differs from launch elevation, time of flight and range change. Assuming launch height \\(h>0\\) , vertical motion becomes: \\[ y(t)=h+v_0\\sin\\theta\\cdot t-\\frac{1}{2}gt^2 \\] Solving for the time \\(T\\) when \\(y(T)=0\\) gives: \\[ T=\\frac{v_0\\sin\\theta+\\sqrt{(v_0\\sin\\theta)^2+2gh}}{g} \\] Then the range is: \\[ R=v_0\\cos\\theta\\cdot T \\] This model is closer to real-world launches, like a drone dropped from a height or skiing off a slope.","title":"3.1.3 Terrain and Uneven Ground"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#32-air-resistance-and-drag","text":"In realistic scenarios, air resistance affects motion significantly, especially at high speeds.","title":"3.2 Air Resistance and Drag"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#321-drag-force-model","text":"A basic drag model (linear with velocity): \\[ F_d=-kv \\] Where: \\(k\\) is the drag coefficient, \\(v\\) is the velocity vector. This leads to nonlinear differential equations: Horizontal: \\( \\(m\\frac{dv_x}{dt}=-kv_x\\) \\) Vertical: \\( \\(m\\frac{dv_y}{dt}=-mg-kv_y\\) \\) Solving these yields exponentially decaying velocities : \\[ v_x(t)=v_{0x}e^{-kt/m},\\quad v_y(t)=\\left(v_{0y}+\\frac{mg}{k}\\right)e^{-kt/m}-\\frac{mg}{k} \\] This results in: A shorter range A steeper descent Asymmetry in the trajectory path","title":"3.2.1 Drag Force Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#33-why-the-idealized-model-fails","text":"","title":"3.3 Why the Idealized Model Fails"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#331-assumptions-in-the-ideal-model","text":"No air resistance Flat, level ground Constant gravitational field No spin or lift forces Point-mass projectile These assumptions simplify analysis but break down in most physical scenarios.","title":"3.3.1 Assumptions in the Ideal Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#332-realistic-factors-affecting-trajectory","text":"Factor Effect on Motion Air resistance Reduces range, alters shape of trajectory Varying terrain Changes landing point and time of flight Wind Can push projectile off-course Altitude Affects air density and gravity slightly Projectile shape/spin Introduces lift forces (e.g., Magnus effect)","title":"3.3.2 Realistic Factors Affecting Trajectory"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#34-summary","text":"The classical model of projectile motion serves as a first approximation for real systems. However, for accurate prediction and control, especially in sports, aerospace, or engineering, extended models incorporating environmental and mechanical factors are necessary. Despite its limitations, understanding the ideal case is essential before progressing to more complex analyses.","title":"3.4 Summary"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#phyton-plot","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"Phyton-plot"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#constants","text":"g = 9.81 # Gravitational acceleration in m/s^2","title":"Constants"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#function-to-calculate-the-range-of-a-projectile","text":"def calculate_range(v0, angle_deg, g=g): angle_rad = np.radians(angle_deg) range_ = (v0**2 * np.sin(2 * angle_rad)) / g return range_","title":"Function to calculate the range of a projectile"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#function-to-plot-range-vs-angle-for-different-velocities","text":"def plot_range_vs_angle(v0_values, g=g): angles = np.linspace(0, 90, 500) # Angles from 0 to 90 degrees plt.figure(figsize=(10, 6)) for v0 in v0_values: ranges = [calculate_range(v0, angle, g) for angle in angles] plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.title('Range vs Angle for Different Initial Velocities') plt.xlabel('Angle (degrees)') plt.ylabel('Range (meters)') plt.legend(title=\"Initial Velocity (m/s)\") plt.grid(True) plt.show()","title":"Function to plot range vs angle for different velocities"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#function-to-plot-range-vs-velocity-for-different-angles","text":"def plot_range_vs_velocity(angle_deg, v0_values, g=g): plt.figure(figsize=(10, 6)) ranges = [calculate_range(v0, angle_deg, g) for v0 in v0_values] plt.plot(v0_values, ranges, label=f'Angle = {angle_deg} degrees') plt.title('Range vs Initial Velocity for a Fixed Angle') plt.xlabel('Initial Velocity (m/s)') plt.ylabel('Range (meters)') plt.legend(title=\"Launch Angle (degrees)\") plt.grid(True) plt.show()","title":"Function to plot range vs velocity for different angles"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#user-input-for-initial-conditions","text":"v0 = float(input(\"Enter initial velocity (m/s): \")) angle = float(input(\"Enter launch angle (degrees): \")) g = float(input(\"Enter gravitational acceleration (m/s^2, default 9.81): \") or 9.81)","title":"User input for initial conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#simulate-and-plot-range-vs-angle-for-different-initial-velocities","text":"v0_values = [10, 20, 30, 40, 50] # Different velocities for comparison plot_range_vs_angle(v0_values)","title":"Simulate and plot range vs angle for different initial velocities"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#simulate-and-plot-range-vs-initial-velocity-for-a-fixed-angle","text":"v0_values = np.linspace(1, 100, 100) plot_range_vs_velocity(angle, v0_values) ``` link","title":"Simulate and plot range vs initial velocity for a fixed angle"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 1. Theoretical Foundation 1.1 Governing Differential Equation The motion of a forced damped pendulum is described by the second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Where: \\(\\theta(t)\\) : Angular displacement (in radians) as a function of time \\(\\gamma\\) : Damping coefficient (viscous damping) \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) : Natural frequency of the pendulum without damping \\(A\\) : Amplitude of the external periodic driving force (torque per unit mass) \\(\\omega\\) : Driving frequency of the external force \\(g\\) : Gravitational acceleration \\(L\\) : Length of the pendulum 1.2 Small-Angle Approximation For small oscillations ( \\(|\\theta| \\ll 1\\) ), we use the approximation: \\[ \\sin(\\theta) \\approx \\theta \\] Applying this, the nonlinear equation becomes a linear second-order differential equation : \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] 1.3 Approximate Analytical Solution The general solution consists of two parts: \\[ \\theta(t) = \\theta_{\\text{hom}}(t) + \\theta_{\\text{part}}(t) \\] Homogeneous solution: Solve the homogeneous part of the equation: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = 0 \\] This has a solution of the form: \\[ \\theta_{\\text{hom}}(t) = e^{-\\frac{\\gamma}{2} t} \\left( C_1 \\cos(\\omega_d t) + C_2 \\sin(\\omega_d t) \\right) \\] Where: \\[ \\omega_d = \\sqrt{\\omega_0^2 - \\left( \\frac{\\gamma}{2} \\right)^2} \\] is the damped natural frequency . Particular solution: We look for a solution of the form: \\[ \\theta_{\\text{part}}(t) = B \\cos(\\omega t - \\delta) \\] Substitute into the linearized equation to find: \\[ B = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2}} \\] \\[ \\tan(\\delta) = \\frac{\\gamma \\omega}{\\omega_0^2 - \\omega^2} \\] 1.4 Resonance Conditions Resonance occurs when the driving frequency \\(\\omega\\) is close to the natural frequency of the system, and the amplitude \\(B\\) reaches its maximum. From the amplitude formula: \\[ B(\\omega) = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2}} \\] To find the resonance frequency , minimize the denominator: \\[ \\frac{d}{d\\omega} \\left[ (\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2 \\right] = 0 \\] Solving gives: \\[ \\omega_r = \\sqrt{\\omega_0^2 - \\frac{\\gamma^2}{2}} \\] So, resonance occurs at a slightly lower frequency than \\(\\omega_0\\) due to damping. 1.5 Energy at Resonance The total energy of the pendulum is given by: \\[ E(t) = \\frac{1}{2} m L^2 \\left( \\left( \\frac{d\\theta}{dt} \\right)^2 + \\omega_0^2 \\theta^2 \\right) \\] At resonance, the amplitude \\(\\theta(t)\\) increases significantly (in ideal, undamped systems it diverges). However, with damping, a steady-state oscillation is reached where the energy input by the driving force balances the energy lost due to damping . The power input from the driving force over one period \\(T = \\frac{2\\pi}{\\omega}\\) is: \\[ P_{\\text{in}} = \\langle F(t) \\cdot \\frac{d\\theta}{dt} \\rangle = \\langle A \\cos(\\omega t) \\cdot \\frac{d\\theta}{dt} \\rangle \\] In steady state, this equals the power dissipated by damping : \\[ P_{\\text{diss}} = \\gamma \\left\\langle \\left( \\frac{d\\theta}{dt} \\right)^2 \\right\\rangle \\] At resonance, both energy input and dissipation are maximized, but amplitude remains finite due to this balance. 2. Analysis of Dynamics The dynamics of a forced damped pendulum are governed by the nonlinear second-order differential equation: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma\\frac{d\\theta}{dt} + \\omega_0^2\\sin(\\theta) = A\\cos(\\omega t) \\] where: - \\(\\theta(t)\\) is the angular displacement, - \\(\\gamma\\) is the damping coefficient, - \\(\\omega_0\\) is the natural frequency of the pendulum, - \\(A\\) is the amplitude of the external driving force, - \\(\\omega\\) is the driving frequency. 2.1 Effects of the Damping Coefficient ( \\(\\gamma\\) ) The damping term \\(\\gamma\\frac{d\\theta}{dt}\\) resists motion and dissipates energy. As \\(\\gamma\\) increases: The system loses energy more rapidly. Oscillations decay faster in the absence of driving. The amplitude of the steady-state oscillations decreases. The resonance peak in amplitude vs. frequency response becomes broader and lower. For high damping, the system may become overdamped , where: \\[ \\gamma^2 > 4\\omega_0^2 \\] This leads to a non-oscillatory return to equilibrium. In contrast, underdamped motion occurs when: \\[ \\gamma^2 < 4\\omega_0^2 \\] which still allows oscillations but with decaying amplitude. 2.2 Effects of the Driving Amplitude ( \\(A\\) ) The driving amplitude \\(A\\) directly affects the energy pumped into the system. Increasing \\(A\\) leads to: Higher oscillation amplitudes in the steady state. Enhanced nonlinear effects (e.g., deviation from sinusoidal motion). Increased likelihood of chaotic behavior. At small \\(A\\) , the system behaves linearly. However, when \\(A\\) exceeds a certain threshold, the system exhibits nonlinear and chaotic dynamics . 2.3 Effects of the Driving Frequency ( \\(\\omega\\) ) The response of the pendulum depends critically on the relation between \\(\\omega\\) and \\(\\omega_0\\) . When \\(\\omega \\approx \\omega_0\\) , resonance occurs, leading to a maximal energy transfer and large oscillations. For \\(\\omega \\ll \\omega_0\\) , the pendulum follows the driving force slowly. For \\(\\omega \\gg \\omega_0\\) , the system cannot follow the fast oscillations and the response becomes negligible. The resonance frequency is approximately: \\[ \\omega_{\\text{res}} = \\sqrt{\\omega_0^2 - \\frac{\\gamma^2}{2}} \\] which shifts lower with increasing \\(\\gamma\\) . 2.4 Transition from Regular to Chaotic Motion As parameters \\((A,\\omega,\\gamma)\\) are varied, the pendulum exhibits a rich spectrum of behaviors: Periodic motion : Motion repeats after fixed time intervals. Quasi-periodic motion : Two or more incommensurate frequencies coexist, leading to non-repeating but structured motion. Chaotic motion : Aperiodic, sensitive to initial conditions, and appears random. The transition to chaos is often visualized using: Phase portraits : Plots of \\((\\theta,\\dot{\\theta})\\) . Poincar\u00e9 sections : Discrete sampling at intervals of the driving period \\(T = \\frac{2\\pi}{\\omega}\\) . Bifurcation diagrams : Plot of long-term behavior as a parameter (e.g., \\(A\\) or \\(\\omega\\) ) is varied. 2.5 Physical Meaning of Chaos in the Pendulum System Chaos in this context is deterministic , governed by precise equations, yet unpredictable due to sensitivity to initial conditions. Physically, this implies: Small differences in starting conditions lead to vastly different trajectories. Long-term prediction becomes impossible despite knowing the system. The pendulum does not settle into a fixed pattern or periodic cycle. Real-world implications include: Difficulty in designing stable systems under oscillatory forces. Necessity of numerical simulations for understanding behavior. Importance in understanding weather systems, heart rhythms, and mechanical stability. 3. Practical Applications The forced damped pendulum serves as a foundational model for a wide range of real-world systems. Its governing equation: \\[ \\frac{d^2\\theta}{dt^2}+\\gamma\\frac{d\\theta}{dt}+\\omega_0^2\\sin(\\theta)=A\\cos(\\omega t) \\] is analogous to many physical systems that involve restoring forces , damping , and external driving forces . Below are key examples and their interpretations. 3.1 Energy Harvesting Devices In vibrational energy harvesters, mechanical components oscillate due to ambient vibrations. These devices often operate like forced damped pendulums. The pendulum\u2019s mass-spring system mimics the motion of components in piezoelectric or electromagnetic energy harvesters. The resonance condition is critical for efficient energy capture: $$ \\omega\\approx\\omega_0\\Rightarrow\\text{maximum energy transfer} $$ The harvested power \\(P\\) is related to the amplitude of oscillation and the damping factor \\(\\gamma\\) : $$ P\\propto\\gamma\\left(\\frac{d\\theta}{dt}\\right)^2 $$ Efficient harvesters are tuned to match the dominant frequency of environmental vibrations, leveraging the pendulum resonance behavior. 3.2 Suspension Bridges and Mechanical Structures Large structures like bridges experience oscillations due to wind or traffic, modeled effectively by the forced damped pendulum. Tacoma Narrows Bridge collapse (1940) is a classic case of resonance-induced failure . Structural components follow equations like: $$ m\\frac{d^2x}{dt^2}+b\\frac{dx}{dt}+kx=F\\cos(\\omega t) $$ where: - \\(x(t)\\) : displacement, - \\(b\\) : damping coefficient, - \\(k\\) : spring constant, - \\(F\\) : driving force amplitude. These are mathematically equivalent to the small-angle approximation of the pendulum's equation. Engineers use this model to design damping systems and avoid resonance conditions. 3.3 Electrical Analog: Driven RLC Circuits The RLC circuit, consisting of a resistor (R), inductor (L), and capacitor (C) under a driving voltage, is governed by: \\[ L\\frac{d^2q}{dt^2}+R\\frac{dq}{dt}+\\frac{q}{C}=V_0\\cos(\\omega t) \\] \\(q(t)\\) : electric charge (analogous to \\(\\theta\\) ), \\(R\\) : damping ( \\(\\gamma\\) ), \\(\\frac{1}{C}\\) : restoring force ( \\(\\omega_0^2\\) ), \\(V_0\\cos(\\omega t)\\) : driving voltage ( \\(A\\cos(\\omega t)\\) ). This is mathematically identical to the forced damped pendulum in small-angle approximation. Applications: - Radio tuning circuits, - Signal filtering, - Power regulation. Understanding the pendulum helps interpret electrical resonance, damping effects, and phase shifts. 3.4 Biomechanics: Human Gait and Posture Control Human movement, such as leg swings during walking , is modeled as an inverted forced damped pendulum. External forces from muscles drive the system. Damping comes from internal friction and joint resistance. Restoring forces arise from gravity and tendon elasticity. Simplified gait models use: \\[ \\frac{d^2\\theta}{dt^2}+\\gamma\\frac{d\\theta}{dt}+g\\sin(\\theta)=A\\cos(\\omega t) \\] This helps in: - Designing prosthetics, - Optimizing athletic performance, - Preventing falls in the elderly. 3.5 Clocks and Metronomes Pendulums are traditional timekeeping elements. For accurate performance: Damping must be minimal, Driving force must match energy loss to maintain periodicity. Small perturbations can lead to long-term chaotic drift if not stabilized. Summary Table System Oscillating Quantity Damping ( \\(\\gamma\\) ) Driving Force ( \\(A\\cos(\\omega t)\\) ) Energy Harvester Displacement ( \\(x\\) ) Friction/Resistance Ambient Vibration Suspension Bridge Beam position ( \\(x\\) ) Air resistance, joints Wind, Traffic RLC Circuit Charge ( \\(q\\) ) Electrical resistance ( \\(R\\) ) AC Voltage ( \\(V_0\\cos(\\omega t)\\) ) Human Gait Leg angle ( \\(\\theta\\) ) Joint friction Muscle activation Pendulum Clock Angle ( \\(\\theta\\) ) Air drag Escapement mechanism 4. Computational Implementation Forced Damped Pendulum: Theoretical, Analytical, Practical, and Computational Study 1. Theoretical Foundation Governing Differential Equation The general equation of motion for a forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma\\frac{d\\theta}{dt} + \\omega_0^2\\sin(\\theta) = A\\cos(\\omega t) \\] Where: - \\(\\theta(t)\\) is the angular displacement, - \\(\\gamma\\) is the damping coefficient, - \\(\\omega_0 = \\sqrt{\\frac{g}{l}}\\) is the natural frequency, - \\(A\\) is the amplitude of the external driving force, - \\(\\omega\\) is the driving frequency. Small-Angle Approximation Using the small-angle approximation \\(\\sin(\\theta) \\approx \\theta\\) , the equation becomes: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma\\frac{d\\theta}{dt} + \\omega_0^2\\theta = A\\cos(\\omega t) \\] This is a linear nonhomogeneous second-order ODE. Analytical Solution (Small Oscillations) Assuming a steady-state solution of the form: \\[ \\theta(t) = \\theta_0\\cos(\\omega t - \\delta) \\] Substitute into the differential equation: \\[ -\\theta_0\\omega^2\\cos(\\omega t - \\delta) + \\gamma\\theta_0\\omega\\sin(\\omega t - \\delta) + \\omega_0^2\\theta_0\\cos(\\omega t - \\delta) = A\\cos(\\omega t) \\] Group terms: \\[ \\theta_0[(\\omega_0^2 - \\omega^2)\\cos(\\omega t - \\delta) + \\gamma\\omega\\sin(\\omega t - \\delta)] = A\\cos(\\omega t) \\] From this, we derive: \\[ \\theta_0 = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2\\omega^2}} \\] And the phase lag: \\[ \\tan(\\delta) = \\frac{\\gamma\\omega}{\\omega_0^2 - \\omega^2} \\] Resonance Condition Resonance occurs when the amplitude is maximized. This happens near: \\[ \\omega_{\\text{res}} = \\sqrt{\\omega_0^2 - \\frac{\\gamma^2}{2}} \\] Energy Under Resonance Energy input from the driving force matches energy lost due to damping. As a result: System absorbs maximum power. Oscillation amplitude increases sharply if damping is low. For large damping, resonance peak flattens. 2. Analysis of Dynamics Effect of Damping Coefficient \\(\\gamma\\) Low \\(\\gamma\\) : Sharp resonance, system retains energy longer. High \\(\\gamma\\) : Broader resonance, system dissipates energy quickly. Critical damping : Returns to equilibrium without oscillating. Overdamping : Slow return to equilibrium. Effect of Driving Amplitude \\(A\\) Small \\(A\\) : Periodic response with small amplitude. Moderate \\(A\\) : Nonlinear behavior, multiple frequencies may appear. Large \\(A\\) : Possible chaotic motion, especially when combined with low \\(\\gamma\\) . Effect of Driving Frequency \\(\\omega\\) If \\(\\omega \\approx \\omega_0\\) , resonance amplifies response. For \\(\\omega \\gg \\omega_0\\) or \\(\\omega \\ll \\omega_0\\) , system does not respond significantly. Transition to Chaos As parameters ( \\(A\\) , \\(\\omega\\) , \\(\\gamma\\) ) vary: - The system transitions from periodic \u2192 quasi-periodic \u2192 chaotic motion. - Observed via Poincar\u00e9 sections and bifurcation diagrams. Physical Meaning of Chaos Sensitive dependence on initial conditions . Long-term unpredictability . Appears in real systems like climate, circuits, mechanical vibrations. Deterministic but unpredictable due to nonlinear feedback. 3. Practical Applications Real-World Systems Modeled by Forced Damped Pendulum Energy Harvesters Use vibrational input to generate power. Optimization of resonance critical. Suspension Bridges Oscillations from wind or traffic. Damping prevents resonance-based collapses (e.g., Tacoma Narrows Bridge). Electrical Circuits RLC circuits obey same form: $$ L\\frac{d^2q}{dt^2} + R\\frac{dq}{dt} + \\frac{1}{C}q = V_0\\cos(\\omega t) $$ Clocks and Gyroscopes Require steady oscillation without resonance or chaotic behavior. Biomechanics Human joints modeled as damped oscillators for gait analysis and prosthetics. 4. Computational Implementation Differential Equations We rewrite the second-order ODE: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma\\frac{d\\theta}{dt} + \\omega_0^2\\sin(\\theta) = A\\cos(\\omega t) \\] As a system of first-order ODEs: Let: - \\(\\theta_1 = \\theta\\) - \\(\\theta_2 = \\frac{d\\theta}{dt}\\) Then: \\[ \\frac{d\\theta_1}{dt} = \\theta_2 \\] \\[ \\frac{d\\theta_2}{dt} = -\\gamma\\theta_2 - \\omega_0^2\\sin(\\theta_1) + A\\cos(\\omega t) \\] Python Code (Runge-Kutta 4) 5. Visualization & Results 5.1 Resonance Visualization To understand resonance in the forced damped pendulum, we analyze the steady-state amplitude of the pendulum as a function of the driving frequency \\(\u03c9_{\\text{drive}}\\) . The system is governed by the equation: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega_{\\text{drive}} t) \\] Under small-angle approximation ( \\(\\sin(\\theta) \\approx \\theta\\) ), the system behaves approximately like a driven harmonic oscillator. For such systems, the amplitude response is given by: \\[ \\theta_{\\text{amp}}(\\omega_{\\text{drive}}) = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega_{\\text{drive}}^2)^2 + (\\gamma \\omega_{\\text{drive}})^2}} \\] This amplitude can be plotted against \\(\u03c9_{\\text{drive}}\\) to visualize resonance, where the peak indicates the resonance frequency. 5.2 Poincar\u00e9 Sections and Chaotic Behavior To demonstrate chaotic behavior, we use Poincar\u00e9 sections , which are stroboscopic maps of the system taken at times: \\[ t_n = nT, \\quad T = \\frac{2\\pi}{\\omega_{\\text{drive}}}, \\quad n \\in \\mathbb{N} \\] At each \\(t_n\\) , we record the phase space coordinates \\((\\theta(t_n), \\dot{\\theta}(t_n))\\) . For periodic motion , the Poincar\u00e9 section shows a finite number of discrete points. For quasiperiodic motion , it forms closed curves (invariant tori). For chaotic motion , it becomes a scattered, strange attractor. These patterns help identify the nature of the dynamics. 5.3 Sensitivity to Initial Conditions A hallmark of chaotic systems is sensitive dependence on initial conditions . Consider two trajectories: \\[ \\theta_1(0) = \\theta_0, \\quad \\theta_2(0) = \\theta_0 + \\varepsilon \\] Even for a small \\(\\varepsilon\\) , the difference: \\[ |\\theta_1(t) - \\theta_2(t)| \\] grows exponentially with time in chaotic regimes: \\[ |\\Delta\\theta(t)| \\sim e^{\\lambda t}, \\quad \\lambda > 0 \\] where \\(\\lambda\\) is the Lyapunov exponent . 5.4 Dynamical Regimes By varying parameters like \\(A\\) , \\(\\gamma\\) , and \\(\\omega_{\\text{drive}}\\) , we can observe different dynamical regimes: Periodic motion : The system repeats after a fixed time. Quasiperiodic motion : The motion is not periodic, but never repeats exactly. Chaotic motion : Aperiodic, bounded, and highly sensitive to initial conditions. These regimes can be identified using: Time series analysis : \\(\\theta(t)\\) and \\(\\dot{\\theta}(t)\\) plots. Phase diagrams : plotting \\(\\dot{\\theta}\\) vs. \\(\\theta\\) . Poincar\u00e9 maps : sampling the system once every driving period. Bifurcation diagrams : plotting long-term behavior versus a system parameter like \\(A\\) or \\(\\omega_{\\text{drive}}\\) . Summary of Plots to Generate Amplitude vs. \\(\u03c9_{\\text{drive}}\\) (resonance curve) Time series: \\(\\theta(t)\\) , \\(\\dot{\\theta}(t)\\) Phase diagram: \\(\\dot{\\theta}\\) vs. \\(\\theta\\) Poincar\u00e9 section: \\((\\theta, \\dot{\\theta})\\) at \\(t_n\\) Sensitivity: \\(|\\Delta \\theta(t)|\\) for slightly different initial conditions Bifurcation diagram: \\(\\theta(t \\to \\infty)\\) vs. \\(A\\) or \\(\u03c9_{\\text{drive}}\\) Pendulum Simulation Summary: The pendulum is modeled by the nonlinear ODE: \\[ \\ddot{\\theta} + b \\dot{\\theta} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega t) \\] where: - \\(\\\\theta\\) = angle (rad) - \\(\\\\dot{\\\\theta}\\) = angular velocity (rad/s) - \\(b\\) = damping coefficient - \\(g = 9.81\\\\, m/s^2\\) (gravity) - \\(L = 1.0\\\\, m\\) (pendulum length) - \\(A\\) = forcing amplitude - \\(\\\\omega\\) = forcing frequency Scenarios simulated: 1. Pure pendulum: \\(b=0\\) , \\(A=0\\) 2. Damped pendulum: \\(b \\\\approx 0.37\\) , \\(A=0\\) 3. Forced pendulum: \\(b=0\\) , \\(A \\\\approx 1.75\\) , \\(\\\\omega \\\\approx 2.75\\) Initial conditions: - \\(\\\\theta(0) = 0.5\\) rad - \\(\\\\dot{\\\\theta}(0) = 0\\) Time span: 0 to 30 seconds. Outputs: - Plot of \\(\\\\theta(t)\\) vs time - Phase diagram: \\(\\\\theta\\) vs \\(\\\\dot{\\\\theta}\\) \"\"\" # Install necessary libraries (only if not already installed) !pip install matplotlib numpy scipy --quiet # --- Imports --- import matplotlib.pyplot as plt import numpy as np from scipy.integrate import solve_ivp # --- Pendulum models --- def pure_pendulum(t, y): theta, omega = y dydt = [omega, -np.sin(theta)] return dydt def damped_pendulum(t, y, b): theta, omega = y dydt = [omega, -b * omega - np.sin(theta)] return dydt def forced_pendulum(t, y, A, omega_d): theta, omega = y dydt = [omega, -0.5 * omega - np.sin(theta) + A * np.cos(omega_d * t)] return dydt # --- Time vector --- t = np.linspace(0, 30, 3000) # --- Solve each system --- sol_pure = solve_ivp(pure_pendulum, [0, 30], [0.5, 0], t_eval=t) sol_damped = solve_ivp(damped_pendulum, [0, 30], [0.5, 0], t_eval=t, args=(0.35,)) sol_forced = solve_ivp(forced_pendulum, [0, 30], [0.5, 0], t_eval=t, args=(1.5, 2.3)) # --- Plotting --- fig, axs = plt.subplots(3, 2, figsize=(14, 10)) fig.suptitle(\"Pendulum Dynamics with Random Parameters\", fontsize=14) # Pure pendulum axs[0, 0].plot(sol_pure.t, sol_pure.y[0]) axs[0, 0].set_title(\"Pure pendulum (b=0, A=0) - Angle vs Time\") axs[0, 0].set_xlabel(\"Time (s)\") axs[0, 0].set_ylabel(\"Angle (rad)\") axs[0, 1].plot(sol_pure.y[0], sol_pure.y[1]) axs[0, 1].set_title(\"Pure pendulum (b=0, A=0) - Phase Diagram\") axs[0, 1].set_xlabel(\"Angle (rad)\") axs[0, 1].set_ylabel(\"Angular velocity (rad/s)\") # Damped pendulum axs[1, 0].plot(sol_damped.t, sol_damped.y[0]) axs[1, 0].set_title(\"Damped pendulum (b=0.44, A=0) - Angle vs Time\") axs[1, 0].set_xlabel(\"Time (s)\") axs[1, 0].set_ylabel(\"Angle (rad)\") axs[1, 1].plot(sol_damped.y[0], sol_damped.y[1]) axs[1, 1].set_title(\"Damped pendulum (b=0.44, A=0) - Phase Diagram\") axs[1, 1].set_xlabel(\"Angle (rad)\") axs[1, 1].set_ylabel(\"Angular velocity (rad/s)\") # Forced pendulum axs[2, 0].plot(sol_forced.t, sol_forced.y[0]) axs[2, 0].set_title(\"Forced pendulum (b=0, A=1.93, \u03c9=2.46) - Angle vs Time\") axs[2, 0].set_xlabel(\"Time (s)\") axs[2, 0].set_ylabel(\"Angle (rad)\") axs[2, 1].plot(sol_forced.y[0], sol_forced.y[1]) axs[2, 1].set_title(\"Forced pendulum (b=0, A=1.93, \u03c9=2.46) - Phase Diagram\") axs[2, 1].set_xlabel(\"Angle (rad)\") axs[2, 1].set_ylabel(\"Angular velocity (rad/s)\") plt.tight_layout(rect=[0, 0, 1, 0.96]) plt.savefig(\"pendulum_dynamics_unique.jpg\", format=\"jpg\") plt.show() 6. Discussion and Evaluation 6.1 Summary of Findings Through both theoretical analysis and computational simulations, the forced damped pendulum system has been shown to exhibit a wide variety of dynamical behaviors, ranging from simple periodic oscillations to chaotic motion. Key observations include: For small driving amplitudes and low damping , the motion remains nearly periodic and closely matches the linearized solution of the small-angle approximation. Increasing the driving amplitude ( \\(A\\) ) or decreasing the damping coefficient ( \\(\\gamma\\) ) leads to a transition into quasiperiodic and eventually chaotic motion. At specific driving frequencies ( \\(\\omega\\) ), resonance is observed, where the amplitude of oscillation reaches a maximum due to synchronization between the external driving force and the natural frequency of the system. Poincar\u00e9 sections reveal the emergence of chaotic attractors, and bifurcation diagrams illustrate the sensitive dependence on system parameters and initial conditions. 6.2 Limitations of the Model While insightful, the model is built on certain idealizations: Small-Angle Approximation : The approximation \\(\\sin(\\theta) \\approx \\theta\\) is only valid for small angular displacements ( \\(\\theta \\ll 1\\) rad). This linearization removes the richness of the full nonlinear behavior and can misrepresent the system near resonances or at higher amplitudes. Idealized Driving Force : The driving force is modeled as a pure cosine : \\(A \\cos(\\omega t)\\) . Real-world driving forces may not be perfectly periodic or sinusoidal and may include noise or impulses. Linear Damping : The damping force is assumed to be proportional to velocity: \\(-\\gamma \\dot{\\theta}\\) . In physical systems, damping can be nonlinear or frequency-dependent. Isolated System : The pendulum is considered as a single-degree-of-freedom system. Many real-world systems involve coupled pendulums or systems with multiple interacting components . 6.3 Possible Model Extensions To improve realism and explore more complex behaviors, the following extensions can be considered: 1. Nonlinear Damping Introduce a damping force with nonlinear dependence on velocity: \\[ \\text{Damping} = -\\gamma_1 \\dot{\\theta} - \\gamma_2 \\dot{\\theta}^3 \\] This can capture drag effects in fluids or energy losses in materials under strain. 2. Non-Periodic Driving Force Replace the harmonic driver with non-periodic or even stochastic inputs: Pulsed driving: \\(A \\cos^3(\\omega t)\\) Quasi-periodic forcing: \\(A_1 \\cos(\\omega_1 t) + A_2 \\cos(\\omega_2 t)\\) Random forcing: \\(A \\cos(\\omega t + \\phi(t))\\) , where \\(\\phi(t)\\) is a noise function 3. Multi-Degree-of-Freedom Systems Model multiple interacting pendulums or linked oscillators: Coupled pendulums: $$ \\ddot{\\theta}_1 + \\gamma \\dot{\\theta}_1 + \\omega_0^2 \\sin(\\theta_1) = k(\\theta_2 - \\theta_1) $$ $$ \\ddot{\\theta}_2 + \\gamma \\dot{\\theta}_2 + \\omega_0^2 \\sin(\\theta_2) = k(\\theta_1 - \\theta_2) $$ These models allow exploration of synchronization, wave propagation, and pattern formation in complex systems. Overall, the forced damped pendulum serves as an excellent case study in nonlinear dynamics, chaos theory, and resonance phenomena, and provides a foundation for modeling numerous systems in physics and engineering. Academic Deliverables for Simulations and Analysis 1. Introduction The purpose of this document is to present a detailed overview of the topic of [insert topic], including theoretical foundations, governing equations, and relevant analysis. We will derive key equations and use them in numerical simulations to illustrate the key phenomena in the system. 2. Theoretical Foundations 2.1. Governing Equations In [insert context], the governing equation is derived from [insert basis, e.g., physical principles, conservation laws]. Consider the general form of the [insert name of equation], which governs the system dynamics. Heat Diffusion Equation One of the central equations is the heat diffusion equation, given by: \\[ \\frac{\\partial u}{\\partial t} = \\alpha \\nabla^2 u \\] where: - \\(u(x,t)\\) is the temperature at point \\(x\\) and time \\(t\\) . - \\(\\alpha\\) is the thermal diffusivity. - \\(\\nabla^2\\) is the Laplacian operator, which represents spatial second derivatives. The Laplacian in one dimension is given by: \\[ \\nabla^2 u = \\frac{\\partial^2 u}{\\partial x^2} \\] Conservation of Mass Equation For systems involving fluid dynamics or mass transport, the general mass conservation equation can be written as: \\[ \\frac{\\partial \\rho}{\\partial t} + \\nabla \\cdot (\\rho \\mathbf{v}) = 0 \\] where: - \\(\\rho\\) is the density. - \\(\\mathbf{v}\\) is the velocity field. 2.2. Boundary and Initial Conditions In most physical problems, boundary conditions define the behavior of the system at the edges of the domain. For heat diffusion in a rod, the boundary conditions can be defined as: Dirichlet Boundary Condition: \\[ u(0, t) = u(L, t) = 0 \\] This specifies that the temperature at both ends of the rod is fixed at 0. Neumann Boundary Condition: \\[ \\frac{\\partial u}{\\partial x}(0, t) = \\frac{\\partial u}{\\partial x}(L, t) = 0 \\] This condition sets the gradient of the temperature to zero at both ends, implying no heat flux. 2.3. Physical Principles Fourier's Law of Heat Conduction Fourier\u2019s law relates the heat flux \\(q\\) to the temperature gradient: \\[ q = -k \\frac{\\partial u}{\\partial x} \\] where: - \\(k\\) is the thermal conductivity. - \\(\\frac{\\partial u}{\\partial x}\\) is the temperature gradient. 3. Numerical Simulation 3.1. Finite Difference Method for Heat Diffusion To solve the heat diffusion equation numerically, we can use the finite difference method. The method involves discretizing the spatial domain and time into small intervals. The update equation for the temperature at a given time step can be written as: \\[ u_i^{n+1} = u_i^n + \\alpha \\frac{\\Delta t}{(\\Delta x)^2} \\left( u_{i+1}^n - 2u_i^n + u_{i-1}^n \\right) \\] where: - \\(u_i^n\\) is the temperature at the \\(i\\) -th grid point at time step \\(n\\) . - \\(\\Delta t\\) is the time step. - \\(\\Delta x\\) is the spatial step. The initial condition is typically set to a specific temperature distribution, for example: \\[ u(x, 0) = \\begin{cases} T_0, & \\text{for } 0 \\leq x \\leq L/2 \\\\ 0, & \\text{for } L/2 < x \\leq L \\end{cases} \\] 3.2. Python Code for Numerical Simulation 4. Results and Analysis 4.1. Temperature Distribution Over Time The temperature distribution over time is described by the following equation: \\[ u(x,t) = \\text{Temperature at position } x \\text{ and time } t \\] This represents the evolution of temperature as a function of space ( \\(x\\) ) and time ( \\(t\\) ). As time progresses, the heat pulse spreads out. The system approaches a steady-state solution as \\(t \\to \\infty\\) . The steady-state temperature distribution across the rod becomes uniform, which can be expressed as: \\[ \\lim_{t \\to \\infty} u(x,t) = 0 \\] This represents the final state where the temperature of the rod reaches equilibrium. 4.2. Heat Diffusion Phenomenon The key phenomenon in heat diffusion is the spreading of the heat pulse due to the material's thermal diffusivity, denoted by \\(\\alpha\\) . Over time, the temperature gradient decreases, and the system reaches thermal equilibrium, where no further temperature changes occur. This equilibrium occurs when the heat flow is balanced, and the temperature becomes uniform across the rod. 5. Conclusion In this document, we derived and solved the heat diffusion equation using numerical methods. We illustrated the diffusion process with a Python simulation, showing how an initial temperature distribution evolves over time. The results demonstrated how heat spreads across the rod and how the system reaches a uniform temperature as the heat pulse diffuses. 6. Engineering Applications This methodology and these results have broad applications in various engineering fields, such as: Heat Management in Electrical Components: The heat diffusion model can be applied to understand and control heat generation in electrical components like resistors, capacitors, and microprocessors. Design of Thermal Insulation Systems: By analyzing the heat diffusion process, we can optimize thermal insulation systems to minimize heat transfer and improve energy efficiency in buildings and machinery. Analysis of Heat Transfer in Materials: Heat diffusion models help in understanding how heat moves through different materials, which is important in materials science, metallurgy, and other fields. 7. Future Work Future simulations could extend the current model by exploring more complex scenarios, such as: Non-linear Diffusion Models: In real-world applications, heat diffusion may not always be linear. Non-linear models can be implemented to describe more complex behaviors, such as heat sources that depend on temperature. More Complex Boundary Conditions: The current model uses simple boundary conditions (Dirichlet and Neumann). Future work could include convective heat transfer or other boundary conditions that better reflect real-world systems. Extension to Two or Three Dimensions: While the current model is one-dimensional, it could be extended to two or three dimensions to simulate heat diffusion in more complex geometries, such as rods, plates, or 3D objects.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#11-governing-differential-equation","text":"The motion of a forced damped pendulum is described by the second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Where: \\(\\theta(t)\\) : Angular displacement (in radians) as a function of time \\(\\gamma\\) : Damping coefficient (viscous damping) \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) : Natural frequency of the pendulum without damping \\(A\\) : Amplitude of the external periodic driving force (torque per unit mass) \\(\\omega\\) : Driving frequency of the external force \\(g\\) : Gravitational acceleration \\(L\\) : Length of the pendulum","title":"1.1 Governing Differential Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#12-small-angle-approximation","text":"For small oscillations ( \\(|\\theta| \\ll 1\\) ), we use the approximation: \\[ \\sin(\\theta) \\approx \\theta \\] Applying this, the nonlinear equation becomes a linear second-order differential equation : \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\]","title":"1.2 Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#13-approximate-analytical-solution","text":"The general solution consists of two parts: \\[ \\theta(t) = \\theta_{\\text{hom}}(t) + \\theta_{\\text{part}}(t) \\]","title":"1.3 Approximate Analytical Solution"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#homogeneous-solution","text":"Solve the homogeneous part of the equation: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = 0 \\] This has a solution of the form: \\[ \\theta_{\\text{hom}}(t) = e^{-\\frac{\\gamma}{2} t} \\left( C_1 \\cos(\\omega_d t) + C_2 \\sin(\\omega_d t) \\right) \\] Where: \\[ \\omega_d = \\sqrt{\\omega_0^2 - \\left( \\frac{\\gamma}{2} \\right)^2} \\] is the damped natural frequency .","title":"Homogeneous solution:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#particular-solution","text":"We look for a solution of the form: \\[ \\theta_{\\text{part}}(t) = B \\cos(\\omega t - \\delta) \\] Substitute into the linearized equation to find: \\[ B = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2}} \\] \\[ \\tan(\\delta) = \\frac{\\gamma \\omega}{\\omega_0^2 - \\omega^2} \\]","title":"Particular solution:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#14-resonance-conditions","text":"Resonance occurs when the driving frequency \\(\\omega\\) is close to the natural frequency of the system, and the amplitude \\(B\\) reaches its maximum. From the amplitude formula: \\[ B(\\omega) = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2}} \\] To find the resonance frequency , minimize the denominator: \\[ \\frac{d}{d\\omega} \\left[ (\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2 \\right] = 0 \\] Solving gives: \\[ \\omega_r = \\sqrt{\\omega_0^2 - \\frac{\\gamma^2}{2}} \\] So, resonance occurs at a slightly lower frequency than \\(\\omega_0\\) due to damping.","title":"1.4 Resonance Conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#15-energy-at-resonance","text":"The total energy of the pendulum is given by: \\[ E(t) = \\frac{1}{2} m L^2 \\left( \\left( \\frac{d\\theta}{dt} \\right)^2 + \\omega_0^2 \\theta^2 \\right) \\] At resonance, the amplitude \\(\\theta(t)\\) increases significantly (in ideal, undamped systems it diverges). However, with damping, a steady-state oscillation is reached where the energy input by the driving force balances the energy lost due to damping . The power input from the driving force over one period \\(T = \\frac{2\\pi}{\\omega}\\) is: \\[ P_{\\text{in}} = \\langle F(t) \\cdot \\frac{d\\theta}{dt} \\rangle = \\langle A \\cos(\\omega t) \\cdot \\frac{d\\theta}{dt} \\rangle \\] In steady state, this equals the power dissipated by damping : \\[ P_{\\text{diss}} = \\gamma \\left\\langle \\left( \\frac{d\\theta}{dt} \\right)^2 \\right\\rangle \\] At resonance, both energy input and dissipation are maximized, but amplitude remains finite due to this balance.","title":"1.5 Energy at Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"The dynamics of a forced damped pendulum are governed by the nonlinear second-order differential equation: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma\\frac{d\\theta}{dt} + \\omega_0^2\\sin(\\theta) = A\\cos(\\omega t) \\] where: - \\(\\theta(t)\\) is the angular displacement, - \\(\\gamma\\) is the damping coefficient, - \\(\\omega_0\\) is the natural frequency of the pendulum, - \\(A\\) is the amplitude of the external driving force, - \\(\\omega\\) is the driving frequency.","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#21-effects-of-the-damping-coefficient-gamma","text":"The damping term \\(\\gamma\\frac{d\\theta}{dt}\\) resists motion and dissipates energy. As \\(\\gamma\\) increases: The system loses energy more rapidly. Oscillations decay faster in the absence of driving. The amplitude of the steady-state oscillations decreases. The resonance peak in amplitude vs. frequency response becomes broader and lower. For high damping, the system may become overdamped , where: \\[ \\gamma^2 > 4\\omega_0^2 \\] This leads to a non-oscillatory return to equilibrium. In contrast, underdamped motion occurs when: \\[ \\gamma^2 < 4\\omega_0^2 \\] which still allows oscillations but with decaying amplitude.","title":"2.1 Effects of the Damping Coefficient (\\(\\gamma\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#22-effects-of-the-driving-amplitude-a","text":"The driving amplitude \\(A\\) directly affects the energy pumped into the system. Increasing \\(A\\) leads to: Higher oscillation amplitudes in the steady state. Enhanced nonlinear effects (e.g., deviation from sinusoidal motion). Increased likelihood of chaotic behavior. At small \\(A\\) , the system behaves linearly. However, when \\(A\\) exceeds a certain threshold, the system exhibits nonlinear and chaotic dynamics .","title":"2.2 Effects of the Driving Amplitude (\\(A\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#23-effects-of-the-driving-frequency-omega","text":"The response of the pendulum depends critically on the relation between \\(\\omega\\) and \\(\\omega_0\\) . When \\(\\omega \\approx \\omega_0\\) , resonance occurs, leading to a maximal energy transfer and large oscillations. For \\(\\omega \\ll \\omega_0\\) , the pendulum follows the driving force slowly. For \\(\\omega \\gg \\omega_0\\) , the system cannot follow the fast oscillations and the response becomes negligible. The resonance frequency is approximately: \\[ \\omega_{\\text{res}} = \\sqrt{\\omega_0^2 - \\frac{\\gamma^2}{2}} \\] which shifts lower with increasing \\(\\gamma\\) .","title":"2.3 Effects of the Driving Frequency (\\(\\omega\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#24-transition-from-regular-to-chaotic-motion","text":"As parameters \\((A,\\omega,\\gamma)\\) are varied, the pendulum exhibits a rich spectrum of behaviors: Periodic motion : Motion repeats after fixed time intervals. Quasi-periodic motion : Two or more incommensurate frequencies coexist, leading to non-repeating but structured motion. Chaotic motion : Aperiodic, sensitive to initial conditions, and appears random. The transition to chaos is often visualized using: Phase portraits : Plots of \\((\\theta,\\dot{\\theta})\\) . Poincar\u00e9 sections : Discrete sampling at intervals of the driving period \\(T = \\frac{2\\pi}{\\omega}\\) . Bifurcation diagrams : Plot of long-term behavior as a parameter (e.g., \\(A\\) or \\(\\omega\\) ) is varied.","title":"2.4 Transition from Regular to Chaotic Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#25-physical-meaning-of-chaos-in-the-pendulum-system","text":"Chaos in this context is deterministic , governed by precise equations, yet unpredictable due to sensitivity to initial conditions. Physically, this implies: Small differences in starting conditions lead to vastly different trajectories. Long-term prediction becomes impossible despite knowing the system. The pendulum does not settle into a fixed pattern or periodic cycle. Real-world implications include: Difficulty in designing stable systems under oscillatory forces. Necessity of numerical simulations for understanding behavior. Importance in understanding weather systems, heart rhythms, and mechanical stability.","title":"2.5 Physical Meaning of Chaos in the Pendulum System"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"The forced damped pendulum serves as a foundational model for a wide range of real-world systems. Its governing equation: \\[ \\frac{d^2\\theta}{dt^2}+\\gamma\\frac{d\\theta}{dt}+\\omega_0^2\\sin(\\theta)=A\\cos(\\omega t) \\] is analogous to many physical systems that involve restoring forces , damping , and external driving forces . Below are key examples and their interpretations.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#31-energy-harvesting-devices","text":"In vibrational energy harvesters, mechanical components oscillate due to ambient vibrations. These devices often operate like forced damped pendulums. The pendulum\u2019s mass-spring system mimics the motion of components in piezoelectric or electromagnetic energy harvesters. The resonance condition is critical for efficient energy capture: $$ \\omega\\approx\\omega_0\\Rightarrow\\text{maximum energy transfer} $$ The harvested power \\(P\\) is related to the amplitude of oscillation and the damping factor \\(\\gamma\\) : $$ P\\propto\\gamma\\left(\\frac{d\\theta}{dt}\\right)^2 $$ Efficient harvesters are tuned to match the dominant frequency of environmental vibrations, leveraging the pendulum resonance behavior.","title":"3.1 Energy Harvesting Devices"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#32-suspension-bridges-and-mechanical-structures","text":"Large structures like bridges experience oscillations due to wind or traffic, modeled effectively by the forced damped pendulum. Tacoma Narrows Bridge collapse (1940) is a classic case of resonance-induced failure . Structural components follow equations like: $$ m\\frac{d^2x}{dt^2}+b\\frac{dx}{dt}+kx=F\\cos(\\omega t) $$ where: - \\(x(t)\\) : displacement, - \\(b\\) : damping coefficient, - \\(k\\) : spring constant, - \\(F\\) : driving force amplitude. These are mathematically equivalent to the small-angle approximation of the pendulum's equation. Engineers use this model to design damping systems and avoid resonance conditions.","title":"3.2 Suspension Bridges and Mechanical Structures"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#33-electrical-analog-driven-rlc-circuits","text":"The RLC circuit, consisting of a resistor (R), inductor (L), and capacitor (C) under a driving voltage, is governed by: \\[ L\\frac{d^2q}{dt^2}+R\\frac{dq}{dt}+\\frac{q}{C}=V_0\\cos(\\omega t) \\] \\(q(t)\\) : electric charge (analogous to \\(\\theta\\) ), \\(R\\) : damping ( \\(\\gamma\\) ), \\(\\frac{1}{C}\\) : restoring force ( \\(\\omega_0^2\\) ), \\(V_0\\cos(\\omega t)\\) : driving voltage ( \\(A\\cos(\\omega t)\\) ). This is mathematically identical to the forced damped pendulum in small-angle approximation. Applications: - Radio tuning circuits, - Signal filtering, - Power regulation. Understanding the pendulum helps interpret electrical resonance, damping effects, and phase shifts.","title":"3.3 Electrical Analog: Driven RLC Circuits"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#34-biomechanics-human-gait-and-posture-control","text":"Human movement, such as leg swings during walking , is modeled as an inverted forced damped pendulum. External forces from muscles drive the system. Damping comes from internal friction and joint resistance. Restoring forces arise from gravity and tendon elasticity. Simplified gait models use: \\[ \\frac{d^2\\theta}{dt^2}+\\gamma\\frac{d\\theta}{dt}+g\\sin(\\theta)=A\\cos(\\omega t) \\] This helps in: - Designing prosthetics, - Optimizing athletic performance, - Preventing falls in the elderly.","title":"3.4 Biomechanics: Human Gait and Posture Control"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#35-clocks-and-metronomes","text":"Pendulums are traditional timekeeping elements. For accurate performance: Damping must be minimal, Driving force must match energy loss to maintain periodicity. Small perturbations can lead to long-term chaotic drift if not stabilized.","title":"3.5 Clocks and Metronomes"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#summary-table","text":"System Oscillating Quantity Damping ( \\(\\gamma\\) ) Driving Force ( \\(A\\cos(\\omega t)\\) ) Energy Harvester Displacement ( \\(x\\) ) Friction/Resistance Ambient Vibration Suspension Bridge Beam position ( \\(x\\) ) Air resistance, joints Wind, Traffic RLC Circuit Charge ( \\(q\\) ) Electrical resistance ( \\(R\\) ) AC Voltage ( \\(V_0\\cos(\\omega t)\\) ) Human Gait Leg angle ( \\(\\theta\\) ) Joint friction Muscle activation Pendulum Clock Angle ( \\(\\theta\\) ) Air drag Escapement mechanism","title":"Summary Table"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-computational-implementation","text":"","title":"4. Computational Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#forced-damped-pendulum-theoretical-analytical-practical-and-computational-study","text":"","title":"Forced Damped Pendulum: Theoretical, Analytical, Practical, and Computational Study"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation_1","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-differential-equation","text":"The general equation of motion for a forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma\\frac{d\\theta}{dt} + \\omega_0^2\\sin(\\theta) = A\\cos(\\omega t) \\] Where: - \\(\\theta(t)\\) is the angular displacement, - \\(\\gamma\\) is the damping coefficient, - \\(\\omega_0 = \\sqrt{\\frac{g}{l}}\\) is the natural frequency, - \\(A\\) is the amplitude of the external driving force, - \\(\\omega\\) is the driving frequency.","title":"Governing Differential Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"Using the small-angle approximation \\(\\sin(\\theta) \\approx \\theta\\) , the equation becomes: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma\\frac{d\\theta}{dt} + \\omega_0^2\\theta = A\\cos(\\omega t) \\] This is a linear nonhomogeneous second-order ODE.","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#analytical-solution-small-oscillations","text":"Assuming a steady-state solution of the form: \\[ \\theta(t) = \\theta_0\\cos(\\omega t - \\delta) \\] Substitute into the differential equation: \\[ -\\theta_0\\omega^2\\cos(\\omega t - \\delta) + \\gamma\\theta_0\\omega\\sin(\\omega t - \\delta) + \\omega_0^2\\theta_0\\cos(\\omega t - \\delta) = A\\cos(\\omega t) \\] Group terms: \\[ \\theta_0[(\\omega_0^2 - \\omega^2)\\cos(\\omega t - \\delta) + \\gamma\\omega\\sin(\\omega t - \\delta)] = A\\cos(\\omega t) \\] From this, we derive: \\[ \\theta_0 = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2\\omega^2}} \\] And the phase lag: \\[ \\tan(\\delta) = \\frac{\\gamma\\omega}{\\omega_0^2 - \\omega^2} \\]","title":"Analytical Solution (Small Oscillations)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-condition","text":"Resonance occurs when the amplitude is maximized. This happens near: \\[ \\omega_{\\text{res}} = \\sqrt{\\omega_0^2 - \\frac{\\gamma^2}{2}} \\]","title":"Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#energy-under-resonance","text":"Energy input from the driving force matches energy lost due to damping. As a result: System absorbs maximum power. Oscillation amplitude increases sharply if damping is low. For large damping, resonance peak flattens.","title":"Energy Under Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics_1","text":"","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#effect-of-damping-coefficient-gamma","text":"Low \\(\\gamma\\) : Sharp resonance, system retains energy longer. High \\(\\gamma\\) : Broader resonance, system dissipates energy quickly. Critical damping : Returns to equilibrium without oscillating. Overdamping : Slow return to equilibrium.","title":"Effect of Damping Coefficient \\(\\gamma\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#effect-of-driving-amplitude-a","text":"Small \\(A\\) : Periodic response with small amplitude. Moderate \\(A\\) : Nonlinear behavior, multiple frequencies may appear. Large \\(A\\) : Possible chaotic motion, especially when combined with low \\(\\gamma\\) .","title":"Effect of Driving Amplitude \\(A\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#effect-of-driving-frequency-omega","text":"If \\(\\omega \\approx \\omega_0\\) , resonance amplifies response. For \\(\\omega \\gg \\omega_0\\) or \\(\\omega \\ll \\omega_0\\) , system does not respond significantly.","title":"Effect of Driving Frequency \\(\\omega\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#transition-to-chaos","text":"As parameters ( \\(A\\) , \\(\\omega\\) , \\(\\gamma\\) ) vary: - The system transitions from periodic \u2192 quasi-periodic \u2192 chaotic motion. - Observed via Poincar\u00e9 sections and bifurcation diagrams.","title":"Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#physical-meaning-of-chaos","text":"Sensitive dependence on initial conditions . Long-term unpredictability . Appears in real systems like climate, circuits, mechanical vibrations. Deterministic but unpredictable due to nonlinear feedback.","title":"Physical Meaning of Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications_1","text":"","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#real-world-systems-modeled-by-forced-damped-pendulum","text":"Energy Harvesters Use vibrational input to generate power. Optimization of resonance critical. Suspension Bridges Oscillations from wind or traffic. Damping prevents resonance-based collapses (e.g., Tacoma Narrows Bridge). Electrical Circuits RLC circuits obey same form: $$ L\\frac{d^2q}{dt^2} + R\\frac{dq}{dt} + \\frac{1}{C}q = V_0\\cos(\\omega t) $$ Clocks and Gyroscopes Require steady oscillation without resonance or chaotic behavior. Biomechanics Human joints modeled as damped oscillators for gait analysis and prosthetics.","title":"Real-World Systems Modeled by Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-computational-implementation_1","text":"","title":"4. Computational Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equations","text":"We rewrite the second-order ODE: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma\\frac{d\\theta}{dt} + \\omega_0^2\\sin(\\theta) = A\\cos(\\omega t) \\] As a system of first-order ODEs: Let: - \\(\\theta_1 = \\theta\\) - \\(\\theta_2 = \\frac{d\\theta}{dt}\\) Then: \\[ \\frac{d\\theta_1}{dt} = \\theta_2 \\] \\[ \\frac{d\\theta_2}{dt} = -\\gamma\\theta_2 - \\omega_0^2\\sin(\\theta_1) + A\\cos(\\omega t) \\]","title":"Differential Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#python-code-runge-kutta-4","text":"","title":"Python Code (Runge-Kutta 4)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-visualization-results","text":"","title":"5. Visualization &amp; Results"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#51-resonance-visualization","text":"To understand resonance in the forced damped pendulum, we analyze the steady-state amplitude of the pendulum as a function of the driving frequency \\(\u03c9_{\\text{drive}}\\) . The system is governed by the equation: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega_{\\text{drive}} t) \\] Under small-angle approximation ( \\(\\sin(\\theta) \\approx \\theta\\) ), the system behaves approximately like a driven harmonic oscillator. For such systems, the amplitude response is given by: \\[ \\theta_{\\text{amp}}(\\omega_{\\text{drive}}) = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega_{\\text{drive}}^2)^2 + (\\gamma \\omega_{\\text{drive}})^2}} \\] This amplitude can be plotted against \\(\u03c9_{\\text{drive}}\\) to visualize resonance, where the peak indicates the resonance frequency.","title":"5.1 Resonance Visualization"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#52-poincare-sections-and-chaotic-behavior","text":"To demonstrate chaotic behavior, we use Poincar\u00e9 sections , which are stroboscopic maps of the system taken at times: \\[ t_n = nT, \\quad T = \\frac{2\\pi}{\\omega_{\\text{drive}}}, \\quad n \\in \\mathbb{N} \\] At each \\(t_n\\) , we record the phase space coordinates \\((\\theta(t_n), \\dot{\\theta}(t_n))\\) . For periodic motion , the Poincar\u00e9 section shows a finite number of discrete points. For quasiperiodic motion , it forms closed curves (invariant tori). For chaotic motion , it becomes a scattered, strange attractor. These patterns help identify the nature of the dynamics.","title":"5.2 Poincar\u00e9 Sections and Chaotic Behavior"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#53-sensitivity-to-initial-conditions","text":"A hallmark of chaotic systems is sensitive dependence on initial conditions . Consider two trajectories: \\[ \\theta_1(0) = \\theta_0, \\quad \\theta_2(0) = \\theta_0 + \\varepsilon \\] Even for a small \\(\\varepsilon\\) , the difference: \\[ |\\theta_1(t) - \\theta_2(t)| \\] grows exponentially with time in chaotic regimes: \\[ |\\Delta\\theta(t)| \\sim e^{\\lambda t}, \\quad \\lambda > 0 \\] where \\(\\lambda\\) is the Lyapunov exponent .","title":"5.3 Sensitivity to Initial Conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#54-dynamical-regimes","text":"By varying parameters like \\(A\\) , \\(\\gamma\\) , and \\(\\omega_{\\text{drive}}\\) , we can observe different dynamical regimes: Periodic motion : The system repeats after a fixed time. Quasiperiodic motion : The motion is not periodic, but never repeats exactly. Chaotic motion : Aperiodic, bounded, and highly sensitive to initial conditions. These regimes can be identified using: Time series analysis : \\(\\theta(t)\\) and \\(\\dot{\\theta}(t)\\) plots. Phase diagrams : plotting \\(\\dot{\\theta}\\) vs. \\(\\theta\\) . Poincar\u00e9 maps : sampling the system once every driving period. Bifurcation diagrams : plotting long-term behavior versus a system parameter like \\(A\\) or \\(\\omega_{\\text{drive}}\\) .","title":"5.4 Dynamical Regimes"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#summary-of-plots-to-generate","text":"Amplitude vs. \\(\u03c9_{\\text{drive}}\\) (resonance curve) Time series: \\(\\theta(t)\\) , \\(\\dot{\\theta}(t)\\) Phase diagram: \\(\\dot{\\theta}\\) vs. \\(\\theta\\) Poincar\u00e9 section: \\((\\theta, \\dot{\\theta})\\) at \\(t_n\\) Sensitivity: \\(|\\Delta \\theta(t)|\\) for slightly different initial conditions Bifurcation diagram: \\(\\theta(t \\to \\infty)\\) vs. \\(A\\) or \\(\u03c9_{\\text{drive}}\\)","title":"Summary of Plots to Generate"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#pendulum-simulation-summary","text":"The pendulum is modeled by the nonlinear ODE: \\[ \\ddot{\\theta} + b \\dot{\\theta} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega t) \\] where: - \\(\\\\theta\\) = angle (rad) - \\(\\\\dot{\\\\theta}\\) = angular velocity (rad/s) - \\(b\\) = damping coefficient - \\(g = 9.81\\\\, m/s^2\\) (gravity) - \\(L = 1.0\\\\, m\\) (pendulum length) - \\(A\\) = forcing amplitude - \\(\\\\omega\\) = forcing frequency Scenarios simulated: 1. Pure pendulum: \\(b=0\\) , \\(A=0\\) 2. Damped pendulum: \\(b \\\\approx 0.37\\) , \\(A=0\\) 3. Forced pendulum: \\(b=0\\) , \\(A \\\\approx 1.75\\) , \\(\\\\omega \\\\approx 2.75\\) Initial conditions: - \\(\\\\theta(0) = 0.5\\) rad - \\(\\\\dot{\\\\theta}(0) = 0\\) Time span: 0 to 30 seconds. Outputs: - Plot of \\(\\\\theta(t)\\) vs time - Phase diagram: \\(\\\\theta\\) vs \\(\\\\dot{\\\\theta}\\) \"\"\" # Install necessary libraries (only if not already installed) !pip install matplotlib numpy scipy --quiet # --- Imports --- import matplotlib.pyplot as plt import numpy as np from scipy.integrate import solve_ivp # --- Pendulum models --- def pure_pendulum(t, y): theta, omega = y dydt = [omega, -np.sin(theta)] return dydt def damped_pendulum(t, y, b): theta, omega = y dydt = [omega, -b * omega - np.sin(theta)] return dydt def forced_pendulum(t, y, A, omega_d): theta, omega = y dydt = [omega, -0.5 * omega - np.sin(theta) + A * np.cos(omega_d * t)] return dydt # --- Time vector --- t = np.linspace(0, 30, 3000) # --- Solve each system --- sol_pure = solve_ivp(pure_pendulum, [0, 30], [0.5, 0], t_eval=t) sol_damped = solve_ivp(damped_pendulum, [0, 30], [0.5, 0], t_eval=t, args=(0.35,)) sol_forced = solve_ivp(forced_pendulum, [0, 30], [0.5, 0], t_eval=t, args=(1.5, 2.3)) # --- Plotting --- fig, axs = plt.subplots(3, 2, figsize=(14, 10)) fig.suptitle(\"Pendulum Dynamics with Random Parameters\", fontsize=14) # Pure pendulum axs[0, 0].plot(sol_pure.t, sol_pure.y[0]) axs[0, 0].set_title(\"Pure pendulum (b=0, A=0) - Angle vs Time\") axs[0, 0].set_xlabel(\"Time (s)\") axs[0, 0].set_ylabel(\"Angle (rad)\") axs[0, 1].plot(sol_pure.y[0], sol_pure.y[1]) axs[0, 1].set_title(\"Pure pendulum (b=0, A=0) - Phase Diagram\") axs[0, 1].set_xlabel(\"Angle (rad)\") axs[0, 1].set_ylabel(\"Angular velocity (rad/s)\") # Damped pendulum axs[1, 0].plot(sol_damped.t, sol_damped.y[0]) axs[1, 0].set_title(\"Damped pendulum (b=0.44, A=0) - Angle vs Time\") axs[1, 0].set_xlabel(\"Time (s)\") axs[1, 0].set_ylabel(\"Angle (rad)\") axs[1, 1].plot(sol_damped.y[0], sol_damped.y[1]) axs[1, 1].set_title(\"Damped pendulum (b=0.44, A=0) - Phase Diagram\") axs[1, 1].set_xlabel(\"Angle (rad)\") axs[1, 1].set_ylabel(\"Angular velocity (rad/s)\") # Forced pendulum axs[2, 0].plot(sol_forced.t, sol_forced.y[0]) axs[2, 0].set_title(\"Forced pendulum (b=0, A=1.93, \u03c9=2.46) - Angle vs Time\") axs[2, 0].set_xlabel(\"Time (s)\") axs[2, 0].set_ylabel(\"Angle (rad)\") axs[2, 1].plot(sol_forced.y[0], sol_forced.y[1]) axs[2, 1].set_title(\"Forced pendulum (b=0, A=1.93, \u03c9=2.46) - Phase Diagram\") axs[2, 1].set_xlabel(\"Angle (rad)\") axs[2, 1].set_ylabel(\"Angular velocity (rad/s)\") plt.tight_layout(rect=[0, 0, 1, 0.96]) plt.savefig(\"pendulum_dynamics_unique.jpg\", format=\"jpg\") plt.show()","title":"Pendulum Simulation Summary:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#6-discussion-and-evaluation","text":"","title":"6. Discussion and Evaluation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#61-summary-of-findings","text":"Through both theoretical analysis and computational simulations, the forced damped pendulum system has been shown to exhibit a wide variety of dynamical behaviors, ranging from simple periodic oscillations to chaotic motion. Key observations include: For small driving amplitudes and low damping , the motion remains nearly periodic and closely matches the linearized solution of the small-angle approximation. Increasing the driving amplitude ( \\(A\\) ) or decreasing the damping coefficient ( \\(\\gamma\\) ) leads to a transition into quasiperiodic and eventually chaotic motion. At specific driving frequencies ( \\(\\omega\\) ), resonance is observed, where the amplitude of oscillation reaches a maximum due to synchronization between the external driving force and the natural frequency of the system. Poincar\u00e9 sections reveal the emergence of chaotic attractors, and bifurcation diagrams illustrate the sensitive dependence on system parameters and initial conditions.","title":"6.1 Summary of Findings"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#62-limitations-of-the-model","text":"While insightful, the model is built on certain idealizations: Small-Angle Approximation : The approximation \\(\\sin(\\theta) \\approx \\theta\\) is only valid for small angular displacements ( \\(\\theta \\ll 1\\) rad). This linearization removes the richness of the full nonlinear behavior and can misrepresent the system near resonances or at higher amplitudes. Idealized Driving Force : The driving force is modeled as a pure cosine : \\(A \\cos(\\omega t)\\) . Real-world driving forces may not be perfectly periodic or sinusoidal and may include noise or impulses. Linear Damping : The damping force is assumed to be proportional to velocity: \\(-\\gamma \\dot{\\theta}\\) . In physical systems, damping can be nonlinear or frequency-dependent. Isolated System : The pendulum is considered as a single-degree-of-freedom system. Many real-world systems involve coupled pendulums or systems with multiple interacting components .","title":"6.2 Limitations of the Model"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#63-possible-model-extensions","text":"To improve realism and explore more complex behaviors, the following extensions can be considered:","title":"6.3 Possible Model Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-nonlinear-damping","text":"Introduce a damping force with nonlinear dependence on velocity: \\[ \\text{Damping} = -\\gamma_1 \\dot{\\theta} - \\gamma_2 \\dot{\\theta}^3 \\] This can capture drag effects in fluids or energy losses in materials under strain.","title":"1. Nonlinear Damping"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-non-periodic-driving-force","text":"Replace the harmonic driver with non-periodic or even stochastic inputs: Pulsed driving: \\(A \\cos^3(\\omega t)\\) Quasi-periodic forcing: \\(A_1 \\cos(\\omega_1 t) + A_2 \\cos(\\omega_2 t)\\) Random forcing: \\(A \\cos(\\omega t + \\phi(t))\\) , where \\(\\phi(t)\\) is a noise function","title":"2. Non-Periodic Driving Force"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-multi-degree-of-freedom-systems","text":"Model multiple interacting pendulums or linked oscillators: Coupled pendulums: $$ \\ddot{\\theta}_1 + \\gamma \\dot{\\theta}_1 + \\omega_0^2 \\sin(\\theta_1) = k(\\theta_2 - \\theta_1) $$ $$ \\ddot{\\theta}_2 + \\gamma \\dot{\\theta}_2 + \\omega_0^2 \\sin(\\theta_2) = k(\\theta_1 - \\theta_2) $$ These models allow exploration of synchronization, wave propagation, and pattern formation in complex systems. Overall, the forced damped pendulum serves as an excellent case study in nonlinear dynamics, chaos theory, and resonance phenomena, and provides a foundation for modeling numerous systems in physics and engineering.","title":"3. Multi-Degree-of-Freedom Systems"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#academic-deliverables-for-simulations-and-analysis","text":"","title":"Academic Deliverables for Simulations and Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-introduction","text":"The purpose of this document is to present a detailed overview of the topic of [insert topic], including theoretical foundations, governing equations, and relevant analysis. We will derive key equations and use them in numerical simulations to illustrate the key phenomena in the system.","title":"1. Introduction"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-theoretical-foundations","text":"","title":"2. Theoretical Foundations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#21-governing-equations","text":"In [insert context], the governing equation is derived from [insert basis, e.g., physical principles, conservation laws]. Consider the general form of the [insert name of equation], which governs the system dynamics.","title":"2.1. Governing Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#heat-diffusion-equation","text":"One of the central equations is the heat diffusion equation, given by: \\[ \\frac{\\partial u}{\\partial t} = \\alpha \\nabla^2 u \\] where: - \\(u(x,t)\\) is the temperature at point \\(x\\) and time \\(t\\) . - \\(\\alpha\\) is the thermal diffusivity. - \\(\\nabla^2\\) is the Laplacian operator, which represents spatial second derivatives. The Laplacian in one dimension is given by: \\[ \\nabla^2 u = \\frac{\\partial^2 u}{\\partial x^2} \\]","title":"Heat Diffusion Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#conservation-of-mass-equation","text":"For systems involving fluid dynamics or mass transport, the general mass conservation equation can be written as: \\[ \\frac{\\partial \\rho}{\\partial t} + \\nabla \\cdot (\\rho \\mathbf{v}) = 0 \\] where: - \\(\\rho\\) is the density. - \\(\\mathbf{v}\\) is the velocity field.","title":"Conservation of Mass Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#22-boundary-and-initial-conditions","text":"In most physical problems, boundary conditions define the behavior of the system at the edges of the domain. For heat diffusion in a rod, the boundary conditions can be defined as:","title":"2.2. Boundary and Initial Conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#dirichlet-boundary-condition","text":"\\[ u(0, t) = u(L, t) = 0 \\] This specifies that the temperature at both ends of the rod is fixed at 0.","title":"Dirichlet Boundary Condition:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#neumann-boundary-condition","text":"\\[ \\frac{\\partial u}{\\partial x}(0, t) = \\frac{\\partial u}{\\partial x}(L, t) = 0 \\] This condition sets the gradient of the temperature to zero at both ends, implying no heat flux.","title":"Neumann Boundary Condition:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#23-physical-principles","text":"","title":"2.3. Physical Principles"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#fouriers-law-of-heat-conduction","text":"Fourier\u2019s law relates the heat flux \\(q\\) to the temperature gradient: \\[ q = -k \\frac{\\partial u}{\\partial x} \\] where: - \\(k\\) is the thermal conductivity. - \\(\\frac{\\partial u}{\\partial x}\\) is the temperature gradient.","title":"Fourier's Law of Heat Conduction"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-numerical-simulation","text":"","title":"3. Numerical Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#31-finite-difference-method-for-heat-diffusion","text":"To solve the heat diffusion equation numerically, we can use the finite difference method. The method involves discretizing the spatial domain and time into small intervals. The update equation for the temperature at a given time step can be written as: \\[ u_i^{n+1} = u_i^n + \\alpha \\frac{\\Delta t}{(\\Delta x)^2} \\left( u_{i+1}^n - 2u_i^n + u_{i-1}^n \\right) \\] where: - \\(u_i^n\\) is the temperature at the \\(i\\) -th grid point at time step \\(n\\) . - \\(\\Delta t\\) is the time step. - \\(\\Delta x\\) is the spatial step. The initial condition is typically set to a specific temperature distribution, for example: \\[ u(x, 0) = \\begin{cases} T_0, & \\text{for } 0 \\leq x \\leq L/2 \\\\ 0, & \\text{for } L/2 < x \\leq L \\end{cases} \\]","title":"3.1. Finite Difference Method for Heat Diffusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#32-python-code-for-numerical-simulation","text":"","title":"3.2. Python Code for Numerical Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-results-and-analysis","text":"","title":"4. Results and Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#41-temperature-distribution-over-time","text":"The temperature distribution over time is described by the following equation: \\[ u(x,t) = \\text{Temperature at position } x \\text{ and time } t \\] This represents the evolution of temperature as a function of space ( \\(x\\) ) and time ( \\(t\\) ). As time progresses, the heat pulse spreads out. The system approaches a steady-state solution as \\(t \\to \\infty\\) . The steady-state temperature distribution across the rod becomes uniform, which can be expressed as: \\[ \\lim_{t \\to \\infty} u(x,t) = 0 \\] This represents the final state where the temperature of the rod reaches equilibrium.","title":"4.1. Temperature Distribution Over Time"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#42-heat-diffusion-phenomenon","text":"The key phenomenon in heat diffusion is the spreading of the heat pulse due to the material's thermal diffusivity, denoted by \\(\\alpha\\) . Over time, the temperature gradient decreases, and the system reaches thermal equilibrium, where no further temperature changes occur. This equilibrium occurs when the heat flow is balanced, and the temperature becomes uniform across the rod.","title":"4.2. Heat Diffusion Phenomenon"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-conclusion","text":"In this document, we derived and solved the heat diffusion equation using numerical methods. We illustrated the diffusion process with a Python simulation, showing how an initial temperature distribution evolves over time. The results demonstrated how heat spreads across the rod and how the system reaches a uniform temperature as the heat pulse diffuses.","title":"5. Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#6-engineering-applications","text":"This methodology and these results have broad applications in various engineering fields, such as: Heat Management in Electrical Components: The heat diffusion model can be applied to understand and control heat generation in electrical components like resistors, capacitors, and microprocessors. Design of Thermal Insulation Systems: By analyzing the heat diffusion process, we can optimize thermal insulation systems to minimize heat transfer and improve energy efficiency in buildings and machinery. Analysis of Heat Transfer in Materials: Heat diffusion models help in understanding how heat moves through different materials, which is important in materials science, metallurgy, and other fields.","title":"6. Engineering Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#7-future-work","text":"Future simulations could extend the current model by exploring more complex scenarios, such as: Non-linear Diffusion Models: In real-world applications, heat diffusion may not always be linear. Non-linear models can be implemented to describe more complex behaviors, such as heat sources that depend on temperature. More Complex Boundary Conditions: The current model uses simple boundary conditions (Dirichlet and Neumann). Future work could include convective heat transfer or other boundary conditions that better reflect real-world systems. Extension to Two or Three Dimensions: While the current model is one-dimensional, it could be extended to two or three dimensions to simulate heat diffusion in more complex geometries, such as rods, plates, or 3D objects.","title":"7. Future Work"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Derivation of the Relationship Between Orbital Period and Orbital Radius 1. Theoretical Derivation \ud83d\udcd8 \ud83d\udccc Introduction To understand the motion of celestial bodies, we derive the relationship between the square of the orbital period \\(T^2\\) and the cube of the orbital radius \\(r^3\\) for circular orbits . This relationship is a cornerstone of Kepler\u2019s Third Law , rooted in Newton\u2019s Law of Universal Gravitation and Circular Motion Dynamics . \ud83c\udf0c Newton's Law of Universal Gravitation Newton's law states that the gravitational force \\(F\\) between two masses \\(M\\) and \\(m\\) separated by a distance \\(r\\) is: \\[ F = G\\frac{Mm}{r^2} \\] Where: \\(F\\) is the gravitational force (N) \\(G\\) is the gravitational constant: \\(G \\approx 6.674 \\times 10^{-11} \\,\\text{Nm}^2/\\text{kg}^2\\) \\(M\\) is the mass of the central body (e.g., a planet or star) \\(m\\) is the mass of the orbiting object (e.g., a satellite) \\(r\\) is the orbital radius \ud83c\udfaf Centripetal Force for Circular Orbits An object in circular orbit requires a centripetal force to keep it in motion, given by: \\[ F_c = \\frac{mv^2}{r} \\] Where: \\(v\\) is the orbital speed \\(m\\) is the mass of the orbiting object \u2696\ufe0f Equating Gravitational and Centripetal Force Since the gravitational force provides the necessary centripetal force: \\[ \\frac{mv^2}{r} = G\\frac{Mm}{r^2} \\] Cancel \\(m\\) on both sides: \\[ \\frac{v^2}{r} = G\\frac{M}{r^2} \\] Multiply both sides by \\(r\\) : \\[ v^2 = \\frac{GM}{r} \\] \ud83d\udd01 Expressing Orbital Speed in Terms of Period The orbital period \\(T\\) is the time it takes to complete one full orbit. For circular motion: \\[ v = \\frac{2\\pi r}{T} \\] Substitute into the previous equation: \\[ \\left(\\frac{2\\pi r}{T}\\right)^2 = \\frac{GM}{r} \\] \\[ \\frac{4\\pi^2 r^2}{T^2} = \\frac{GM}{r} \\] Multiply both sides by \\(T^2\\) and then multiply both sides by \\(r\\) : \\[ 4\\pi^2 r^3 = GMT^2 \\] \ud83d\udd0d Solving for Orbital Period Rearrange to solve for \\(T^2\\) : \\[ T^2 = \\frac{4\\pi^2}{GM}r^3 \\] \ud83d\udcd0 Kepler's Third Law (Mathematical Form) This is the mathematical form of Kepler\u2019s Third Law for circular orbits: \\[ T^2 \\propto r^3 \\] Where the proportionality constant is: \\[ \\frac{4\\pi^2}{GM} \\] This equation shows that for a small object orbiting a much more massive body, the square of its orbital period is proportional to the cube of the orbital radius. \ud83d\udcdd Notes This derivation assumes a circular orbit . For elliptical orbits, \\(r\\) becomes the semi-major axis \\(a\\) , but the form \\(T^2 \\propto a^3\\) still holds. This relationship is valid when \\(M \\gg m\\) , such as a satellite orbiting a planet or a planet orbiting the Sun. 2. Conceptual Discussion \ud83d\udd2d \ud83c\udf20 Significance of Kepler\u2019s Third Law in Astronomy and Astrophysics Kepler\u2019s Third Law, in its modern form, expresses a powerful connection between orbital mechanics and gravitational theory . The law states: \\[ T^2 \\propto r^3 \\] For two bodies in orbit, it implies that the square of the orbital period \\(T\\) is proportional to the cube of the semi-major axis (orbital radius in the case of a circular orbit) \\(r\\) . This is significant because: It provides a universal relationship that holds across a vast range of scales, from artificial satellites to exoplanets and galaxies. It is derived from Newton\u2019s Law of Universal Gravitation , thereby linking observational astronomy to fundamental physics. It enables astronomers to infer invisible properties , such as the mass of distant stars , by observing orbital motions. \u2696\ufe0f Calculating the Mass of a Central Body By rearranging the Newtonian version of Kepler\u2019s Third Law: \\[ T^2 = \\frac{4\\pi^2}{GM}r^3 \\] We can solve for the mass \\(M\\) of the central object: \\[ M = \\frac{4\\pi^2}{G} \\cdot \\frac{r^3}{T^2} \\] Where: \\(M\\) is the mass of the central body (e.g., Sun, Earth, star), \\(r\\) is the orbital radius (or semi-major axis for elliptical orbits), \\(T\\) is the orbital period of the orbiting object. Applications : Measuring the mass of the Sun from Earth\u2019s orbit Estimating the mass of exoplanets by observing their effects on their host stars Determining the mass of galaxies using stellar orbits \ud83d\udccf Calculating Orbital Distances Rearranging the same equation, one can solve for \\(r\\) (orbital radius or semi-major axis) if \\(T\\) and \\(M\\) are known: \\[ r = \\left( \\frac{GMT^2}{4\\pi^2} \\right)^{1/3} \\] This is especially useful in: Determining the distance of moons from planets Estimating the orbit size of a satellite given its period Modeling the layout of planetary systems \ud83c\udf00 Extension to Elliptical Orbits Kepler originally stated his laws in terms of elliptical orbits. The modern form of the third law applies not just to circular motion but also to elliptical motion , with \\(r\\) replaced by the semi-major axis \\(a\\) : \\[ T^2 = \\frac{4\\pi^2}{G(M + m)}a^3 \\] Where: \\(a\\) is the semi-major axis of the elliptical orbit \\(m\\) is the mass of the orbiting object (retained here if comparable to \\(M\\) ) In many practical cases where \\(M \\gg m\\) , the term \\(m\\) can be neglected, simplifying back to: \\[ T^2 = \\frac{4\\pi^2}{GM}a^3 \\] This generalization allows: Accurate modeling of planetary orbits in the Solar System Simulation of binary star systems Determination of orbital elements for comets and asteroids \ud83d\udcda Summary Kepler\u2019s Third Law is more than a geometric curiosity\u2014it\u2019s a dynamic, predictive tool that reveals hidden truths about the universe: It connects period , distance , and mass in a simple equation It underpins everything from spacecraft navigation to galactic astronomy It remains valid in both idealized circular and realistic elliptical orbits Its continued relevance shows the power of mathematics and observation working hand-in-hand to uncover the mechanisms of the cosmos. 3. Real-World Applications \ud83c\udf0d\ud83e\ude90 \ud83c\udf0c Kepler's Law \u2013 Mass of Earth and Sun We use Kepler\u2019s Third Law for circular orbits: \\[ M = \\frac{4\\pi^2 r^3}{G T^2} \\] Where: \\(M\\) = mass of the central body (Earth or Sun) \\(r\\) = orbital radius (in meters) \\(T\\) = orbital period (in seconds) \\(G = 6.67430 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) (gravitational constant) \ud83c\udf0d Mass of the Earth (using the Moon\u2019s orbit) Given: \\(r = 3.844 \\times 10^8 \\, \\text{m}\\) \\(T = 27.32 \\, \\text{days} = 27.32 \\times 24 \\times 3600 = 2.3606 \\times 10^6 \\, \\text{s}\\) Now plug into the equation: \\[ M = \\frac{4 \\pi^2 (3.844 \\times 10^8)^3}{6.67430 \\times 10^{-11} \\cdot (2.3606 \\times 10^6)^2} \\] Result: \\[ M \\approx 5.97 \\times 10^{24} \\, \\text{kg} \\] \u2705 Mass of the Earth \u2248 \\(5.97 \\times 10^{24} \\, \\text{kg}\\) \u2600\ufe0f Mass of the Sun (using the Earth\u2019s orbit) Given: \\(r = 1.496 \\times 10^{11} \\, \\text{m}\\) \\(T = 365.25 \\, \\text{days} = 365.25 \\times 24 \\times 3600 = 3.156 \\times 10^7 \\, \\text{s}\\) Then: \\[ M = \\frac{4 \\pi^2 (1.496 \\times 10^{11})^3}{6.67430 \\times 10^{-11} \\cdot (3.156 \\times 10^7)^2} \\] Result: \\[ M \\approx 1.99 \\times 10^{30} \\, \\text{kg} \\] \u2705 Mass of the Sun \u2248 \\(1.99 \\times 10^{30} \\, \\text{kg}\\) These values are consistent with real astronomical measurements. \ud83c\udf15 The Moon\u2019s Orbit Around Earth Let us analyze the Moon's orbit using Kepler\u2019s Third Law and compare theoretical predictions with empirical observations. Known Data Orbital period of Moon: \\(T = 27.32 \\, \\text{days} = 2.3606 \\times 10^6 \\, \\text{s}\\) Average orbital radius: \\(r = 3.844 \\times 10^8 \\, \\text{m}\\) Gravitational constant: \\(G = 6.674 \\times 10^{-11} \\, \\text{Nm}^2/\\text{kg}^2\\) Mass of Earth: \\(M = 5.972 \\times 10^{24} \\, \\text{kg}\\) Theoretical Check via Kepler\u2019s Law Using: \\[ T^2 = \\frac{4\\pi^2}{GM}r^3 \\] Plug in values: \\[ T^2 = \\frac{4\\pi^2}{(6.674 \\times 10^{-11})(5.972 \\times 10^{24})}(3.844 \\times 10^8)^3 \\] Solving numerically: \\[ T^2 \\approx 5.57 \\times 10^{12} \\Rightarrow T \\approx 2.36 \\times 10^6 \\, \\text{s} \\] \u2705 Matches observed value within acceptable error bounds. \ud83e\ude90 Planetary Orbits in the Solar System Kepler\u2019s Law can also be used to compare planetary orbits with observed values. General Relation for Planets (Circular Approximation) \\[ \\frac{T_1^2}{r_1^3} = \\frac{T_2^2}{r_2^3} \\] Where \\(T\\) is the orbital period and \\(r\\) is the orbital radius (semi-major axis). Example: Earth vs. Mars Planet \\(T\\) (years) \\(r\\) (AU) Earth 1.00 1.00 Mars 1.88 1.52 Check the Ratio Left side (Earth): \\(\\frac{1.00^2}{1.00^3} = 1.00\\) Right side (Mars): \\(\\frac{1.88^2}{1.52^3} \\approx \\frac{3.53}{3.51} \\approx 1.00\\) \u2705 Confirms Kepler\u2019s Law \ud83d\udcca Empirical Data vs. Prediction Let\u2019s look at a summary comparison: Planet Observed \\(T\\) (years) Observed \\(r\\) (AU) \\(\\frac{T^2}{r^3}\\) Mercury 0.24 0.39 \\(\\approx 1.01\\) Venus 0.62 0.72 \\(\\approx 1.01\\) Earth 1.00 1.00 \\(1.00\\) Mars 1.88 1.52 \\(\\approx 1.00\\) Jupiter 11.86 5.20 \\(\\approx 1.00\\) Saturn 29.46 9.54 \\(\\approx 1.00\\) Interpretation The ratio \\(\\frac{T^2}{r^3}\\) remains approximately constant for all planets. Small deviations are due to orbital eccentricity , mass of the orbiting object , and non-ideal conditions . \ud83d\udccc Conclusion Kepler\u2019s Third Law: Accurately predicts orbital periods based on distance for natural satellites and planets . Is confirmed by empirical astronomical data across the Solar System. Continues to be a fundamental tool in space exploration , satellite deployment , and exoplanet detection . Next step? Implement this with code and graphs using real planetary datasets. Just say the word! \ud83d\ude80 import numpy as np import matplotlib.pyplot as plt # Gravitational constant G = 6.67430e-11 # m^3 kg^-1 s^-2 # Planetary data (semi-major axis in meters, orbital period in seconds) planet_data = { 'Mercury': (5.79e10, 7.6e6), 'Venus': (1.08e11, 1.94e7), 'Earth': (1.496e11, 3.156e7), 'Mars': (2.28e11, 5.94e7), 'Jupiter': (7.78e11, 3.74e8), 'Saturn': (1.43e12, 9.29e8), 'Uranus': (2.87e12, 2.65e9), 'Neptune': (4.5e12, 5.2e9) } # Extract values a_vals = np.array([a for a, T in planet_data.values()]) T_vals = np.array([T for a, T in planet_data.values()]) planet_names = list(planet_data.keys()) # ---------------------------- # 1. Orbit Example (circular) # ---------------------------- r = 1.5e11 # Example orbit radius (Earth-like) theta = np.linspace(0, 2 * np.pi, 500) x = r * np.cos(theta) y = r * np.sin(theta) plt.figure(figsize=(15, 9)) plt.subplot(2, 2, 1) plt.plot(x, y, 'deepskyblue', label='Planet Orbit') plt.scatter(0, 0, color='gold', s=300, label='Sun') plt.title(\"Example: Circular Orbit of a Planet\") plt.xlabel('x (m)') plt.ylabel('y (m)') plt.axis('equal') plt.legend() plt.grid(True) # ---------------------------------- # 2. Kepler\u2019s Law Plot (T\u00b2 vs a\u00b3) # ---------------------------------- T_squared = T_vals ** 2 a_cubed = a_vals ** 3 plt.subplot(2, 2, 2) plt.scatter(a_cubed, T_squared, color='blue') for i, name in enumerate(planet_names): plt.annotate(name, (a_cubed[i], T_squared[i]), fontsize=9) plt.plot(a_cubed, T_squared, color='blue') plt.title(\"Kepler's Law: $T^2$ vs $a^3$\") plt.xlabel('$a^3$ (m\u00b3)') plt.ylabel('$T^2$ (s\u00b2)') plt.grid(True) # ---------------------------------- # 3. Log-Log Plot (T\u00b2 vs a\u00b3 in AU) # ---------------------------------- AU = 1.496e11 # meters a_AU = a_vals / AU a3_AU = a_AU ** 3 T2_years = (T_vals / (60 * 60 * 24 * 365)) ** 2 # T\u00b2 in years\u00b2 plt.subplot(2, 2, 3) plt.loglog(a3_AU, T2_years, 'ro') for i, name in enumerate(planet_names): plt.annotate(name, (a3_AU[i], T2_years[i]), fontsize=9) plt.plot(a3_AU, T2_years, 'r-') plt.title(\"Log-Log Plot: $T^2$ vs $a^3$\") plt.xlabel('$a^3$ (AU\u00b3)') plt.ylabel('$T^2$ (years\u00b2)') plt.grid(True, which='both') # ---------------------------------- # 4. Estimate Mass of the Sun # ---------------------------------- # Use Earth's values for estimation a_earth = 1.496e11 # m T_earth = 3.156e7 # s M_sun = 4 * np.pi**2 * a_earth**3 / (G * T_earth**2) plt.subplot(2, 2, 4) plt.axis('off') plt.text(0, 0.6, \"Sun Mass Estimation using:\\n\\n$M = \\\\frac{4 \\\\pi^2 a^3}{G T^2}$\", fontsize=15) plt.text(0, 0.3, f\"Estimated Mass:\\n$M_{{sun}} \\\\approx$ {M_sun:.3e} kg\", fontsize=14, color='green') # Show all plots plt.tight_layout() plt.suptitle(\"Kepler's Third Law: Orbital Mechanics Visualization\", fontsize=18, y=1.02) plt.show()","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#derivation-of-the-relationship-between-orbital-period-and-orbital-radius","text":"","title":"Derivation of the Relationship Between Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-theoretical-derivation","text":"","title":"1. Theoretical Derivation \ud83d\udcd8"},{"location":"1%20Physics/2%20Gravity/Problem_1/#introduction","text":"To understand the motion of celestial bodies, we derive the relationship between the square of the orbital period \\(T^2\\) and the cube of the orbital radius \\(r^3\\) for circular orbits . This relationship is a cornerstone of Kepler\u2019s Third Law , rooted in Newton\u2019s Law of Universal Gravitation and Circular Motion Dynamics .","title":"\ud83d\udccc Introduction"},{"location":"1%20Physics/2%20Gravity/Problem_1/#newtons-law-of-universal-gravitation","text":"Newton's law states that the gravitational force \\(F\\) between two masses \\(M\\) and \\(m\\) separated by a distance \\(r\\) is: \\[ F = G\\frac{Mm}{r^2} \\] Where: \\(F\\) is the gravitational force (N) \\(G\\) is the gravitational constant: \\(G \\approx 6.674 \\times 10^{-11} \\,\\text{Nm}^2/\\text{kg}^2\\) \\(M\\) is the mass of the central body (e.g., a planet or star) \\(m\\) is the mass of the orbiting object (e.g., a satellite) \\(r\\) is the orbital radius","title":"\ud83c\udf0c Newton's Law of Universal Gravitation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#centripetal-force-for-circular-orbits","text":"An object in circular orbit requires a centripetal force to keep it in motion, given by: \\[ F_c = \\frac{mv^2}{r} \\] Where: \\(v\\) is the orbital speed \\(m\\) is the mass of the orbiting object","title":"\ud83c\udfaf Centripetal Force for Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#equating-gravitational-and-centripetal-force","text":"Since the gravitational force provides the necessary centripetal force: \\[ \\frac{mv^2}{r} = G\\frac{Mm}{r^2} \\] Cancel \\(m\\) on both sides: \\[ \\frac{v^2}{r} = G\\frac{M}{r^2} \\] Multiply both sides by \\(r\\) : \\[ v^2 = \\frac{GM}{r} \\]","title":"\u2696\ufe0f Equating Gravitational and Centripetal Force"},{"location":"1%20Physics/2%20Gravity/Problem_1/#expressing-orbital-speed-in-terms-of-period","text":"The orbital period \\(T\\) is the time it takes to complete one full orbit. For circular motion: \\[ v = \\frac{2\\pi r}{T} \\] Substitute into the previous equation: \\[ \\left(\\frac{2\\pi r}{T}\\right)^2 = \\frac{GM}{r} \\] \\[ \\frac{4\\pi^2 r^2}{T^2} = \\frac{GM}{r} \\] Multiply both sides by \\(T^2\\) and then multiply both sides by \\(r\\) : \\[ 4\\pi^2 r^3 = GMT^2 \\]","title":"\ud83d\udd01 Expressing Orbital Speed in Terms of Period"},{"location":"1%20Physics/2%20Gravity/Problem_1/#solving-for-orbital-period","text":"Rearrange to solve for \\(T^2\\) : \\[ T^2 = \\frac{4\\pi^2}{GM}r^3 \\]","title":"\ud83d\udd0d Solving for Orbital Period"},{"location":"1%20Physics/2%20Gravity/Problem_1/#keplers-third-law-mathematical-form","text":"This is the mathematical form of Kepler\u2019s Third Law for circular orbits: \\[ T^2 \\propto r^3 \\] Where the proportionality constant is: \\[ \\frac{4\\pi^2}{GM} \\] This equation shows that for a small object orbiting a much more massive body, the square of its orbital period is proportional to the cube of the orbital radius.","title":"\ud83d\udcd0 Kepler's Third Law (Mathematical Form)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#notes","text":"This derivation assumes a circular orbit . For elliptical orbits, \\(r\\) becomes the semi-major axis \\(a\\) , but the form \\(T^2 \\propto a^3\\) still holds. This relationship is valid when \\(M \\gg m\\) , such as a satellite orbiting a planet or a planet orbiting the Sun.","title":"\ud83d\udcdd Notes"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-conceptual-discussion","text":"","title":"2. Conceptual Discussion \ud83d\udd2d"},{"location":"1%20Physics/2%20Gravity/Problem_1/#significance-of-keplers-third-law-in-astronomy-and-astrophysics","text":"Kepler\u2019s Third Law, in its modern form, expresses a powerful connection between orbital mechanics and gravitational theory . The law states: \\[ T^2 \\propto r^3 \\] For two bodies in orbit, it implies that the square of the orbital period \\(T\\) is proportional to the cube of the semi-major axis (orbital radius in the case of a circular orbit) \\(r\\) . This is significant because: It provides a universal relationship that holds across a vast range of scales, from artificial satellites to exoplanets and galaxies. It is derived from Newton\u2019s Law of Universal Gravitation , thereby linking observational astronomy to fundamental physics. It enables astronomers to infer invisible properties , such as the mass of distant stars , by observing orbital motions.","title":"\ud83c\udf20 Significance of Kepler\u2019s Third Law in Astronomy and Astrophysics"},{"location":"1%20Physics/2%20Gravity/Problem_1/#calculating-the-mass-of-a-central-body","text":"By rearranging the Newtonian version of Kepler\u2019s Third Law: \\[ T^2 = \\frac{4\\pi^2}{GM}r^3 \\] We can solve for the mass \\(M\\) of the central object: \\[ M = \\frac{4\\pi^2}{G} \\cdot \\frac{r^3}{T^2} \\] Where: \\(M\\) is the mass of the central body (e.g., Sun, Earth, star), \\(r\\) is the orbital radius (or semi-major axis for elliptical orbits), \\(T\\) is the orbital period of the orbiting object. Applications : Measuring the mass of the Sun from Earth\u2019s orbit Estimating the mass of exoplanets by observing their effects on their host stars Determining the mass of galaxies using stellar orbits","title":"\u2696\ufe0f Calculating the Mass of a Central Body"},{"location":"1%20Physics/2%20Gravity/Problem_1/#calculating-orbital-distances","text":"Rearranging the same equation, one can solve for \\(r\\) (orbital radius or semi-major axis) if \\(T\\) and \\(M\\) are known: \\[ r = \\left( \\frac{GMT^2}{4\\pi^2} \\right)^{1/3} \\] This is especially useful in: Determining the distance of moons from planets Estimating the orbit size of a satellite given its period Modeling the layout of planetary systems","title":"\ud83d\udccf Calculating Orbital Distances"},{"location":"1%20Physics/2%20Gravity/Problem_1/#extension-to-elliptical-orbits","text":"Kepler originally stated his laws in terms of elliptical orbits. The modern form of the third law applies not just to circular motion but also to elliptical motion , with \\(r\\) replaced by the semi-major axis \\(a\\) : \\[ T^2 = \\frac{4\\pi^2}{G(M + m)}a^3 \\] Where: \\(a\\) is the semi-major axis of the elliptical orbit \\(m\\) is the mass of the orbiting object (retained here if comparable to \\(M\\) ) In many practical cases where \\(M \\gg m\\) , the term \\(m\\) can be neglected, simplifying back to: \\[ T^2 = \\frac{4\\pi^2}{GM}a^3 \\] This generalization allows: Accurate modeling of planetary orbits in the Solar System Simulation of binary star systems Determination of orbital elements for comets and asteroids","title":"\ud83c\udf00 Extension to Elliptical Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#summary","text":"Kepler\u2019s Third Law is more than a geometric curiosity\u2014it\u2019s a dynamic, predictive tool that reveals hidden truths about the universe: It connects period , distance , and mass in a simple equation It underpins everything from spacecraft navigation to galactic astronomy It remains valid in both idealized circular and realistic elliptical orbits Its continued relevance shows the power of mathematics and observation working hand-in-hand to uncover the mechanisms of the cosmos.","title":"\ud83d\udcda Summary"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-real-world-applications","text":"","title":"3. Real-World Applications \ud83c\udf0d\ud83e\ude90"},{"location":"1%20Physics/2%20Gravity/Problem_1/#keplers-law-mass-of-earth-and-sun","text":"We use Kepler\u2019s Third Law for circular orbits: \\[ M = \\frac{4\\pi^2 r^3}{G T^2} \\] Where: \\(M\\) = mass of the central body (Earth or Sun) \\(r\\) = orbital radius (in meters) \\(T\\) = orbital period (in seconds) \\(G = 6.67430 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) (gravitational constant)","title":"\ud83c\udf0c Kepler's Law \u2013 Mass of Earth and Sun"},{"location":"1%20Physics/2%20Gravity/Problem_1/#mass-of-the-earth-using-the-moons-orbit","text":"Given: \\(r = 3.844 \\times 10^8 \\, \\text{m}\\) \\(T = 27.32 \\, \\text{days} = 27.32 \\times 24 \\times 3600 = 2.3606 \\times 10^6 \\, \\text{s}\\) Now plug into the equation: \\[ M = \\frac{4 \\pi^2 (3.844 \\times 10^8)^3}{6.67430 \\times 10^{-11} \\cdot (2.3606 \\times 10^6)^2} \\] Result: \\[ M \\approx 5.97 \\times 10^{24} \\, \\text{kg} \\] \u2705 Mass of the Earth \u2248 \\(5.97 \\times 10^{24} \\, \\text{kg}\\)","title":"\ud83c\udf0d Mass of the Earth (using the Moon\u2019s orbit)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#mass-of-the-sun-using-the-earths-orbit","text":"Given: \\(r = 1.496 \\times 10^{11} \\, \\text{m}\\) \\(T = 365.25 \\, \\text{days} = 365.25 \\times 24 \\times 3600 = 3.156 \\times 10^7 \\, \\text{s}\\) Then: \\[ M = \\frac{4 \\pi^2 (1.496 \\times 10^{11})^3}{6.67430 \\times 10^{-11} \\cdot (3.156 \\times 10^7)^2} \\] Result: \\[ M \\approx 1.99 \\times 10^{30} \\, \\text{kg} \\] \u2705 Mass of the Sun \u2248 \\(1.99 \\times 10^{30} \\, \\text{kg}\\) These values are consistent with real astronomical measurements.","title":"\u2600\ufe0f Mass of the Sun (using the Earth\u2019s orbit)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#the-moons-orbit-around-earth","text":"Let us analyze the Moon's orbit using Kepler\u2019s Third Law and compare theoretical predictions with empirical observations.","title":"\ud83c\udf15 The Moon\u2019s Orbit Around Earth"},{"location":"1%20Physics/2%20Gravity/Problem_1/#known-data","text":"Orbital period of Moon: \\(T = 27.32 \\, \\text{days} = 2.3606 \\times 10^6 \\, \\text{s}\\) Average orbital radius: \\(r = 3.844 \\times 10^8 \\, \\text{m}\\) Gravitational constant: \\(G = 6.674 \\times 10^{-11} \\, \\text{Nm}^2/\\text{kg}^2\\) Mass of Earth: \\(M = 5.972 \\times 10^{24} \\, \\text{kg}\\)","title":"Known Data"},{"location":"1%20Physics/2%20Gravity/Problem_1/#theoretical-check-via-keplers-law","text":"Using: \\[ T^2 = \\frac{4\\pi^2}{GM}r^3 \\] Plug in values: \\[ T^2 = \\frac{4\\pi^2}{(6.674 \\times 10^{-11})(5.972 \\times 10^{24})}(3.844 \\times 10^8)^3 \\] Solving numerically: \\[ T^2 \\approx 5.57 \\times 10^{12} \\Rightarrow T \\approx 2.36 \\times 10^6 \\, \\text{s} \\] \u2705 Matches observed value within acceptable error bounds.","title":"Theoretical Check via Kepler\u2019s Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#planetary-orbits-in-the-solar-system","text":"Kepler\u2019s Law can also be used to compare planetary orbits with observed values.","title":"\ud83e\ude90 Planetary Orbits in the Solar System"},{"location":"1%20Physics/2%20Gravity/Problem_1/#general-relation-for-planets-circular-approximation","text":"\\[ \\frac{T_1^2}{r_1^3} = \\frac{T_2^2}{r_2^3} \\] Where \\(T\\) is the orbital period and \\(r\\) is the orbital radius (semi-major axis).","title":"General Relation for Planets (Circular Approximation)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#example-earth-vs-mars","text":"Planet \\(T\\) (years) \\(r\\) (AU) Earth 1.00 1.00 Mars 1.88 1.52","title":"Example: Earth vs. Mars"},{"location":"1%20Physics/2%20Gravity/Problem_1/#check-the-ratio","text":"Left side (Earth): \\(\\frac{1.00^2}{1.00^3} = 1.00\\) Right side (Mars): \\(\\frac{1.88^2}{1.52^3} \\approx \\frac{3.53}{3.51} \\approx 1.00\\) \u2705 Confirms Kepler\u2019s Law","title":"Check the Ratio"},{"location":"1%20Physics/2%20Gravity/Problem_1/#empirical-data-vs-prediction","text":"Let\u2019s look at a summary comparison: Planet Observed \\(T\\) (years) Observed \\(r\\) (AU) \\(\\frac{T^2}{r^3}\\) Mercury 0.24 0.39 \\(\\approx 1.01\\) Venus 0.62 0.72 \\(\\approx 1.01\\) Earth 1.00 1.00 \\(1.00\\) Mars 1.88 1.52 \\(\\approx 1.00\\) Jupiter 11.86 5.20 \\(\\approx 1.00\\) Saturn 29.46 9.54 \\(\\approx 1.00\\)","title":"\ud83d\udcca Empirical Data vs. Prediction"},{"location":"1%20Physics/2%20Gravity/Problem_1/#interpretation","text":"The ratio \\(\\frac{T^2}{r^3}\\) remains approximately constant for all planets. Small deviations are due to orbital eccentricity , mass of the orbiting object , and non-ideal conditions .","title":"Interpretation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#conclusion","text":"Kepler\u2019s Third Law: Accurately predicts orbital periods based on distance for natural satellites and planets . Is confirmed by empirical astronomical data across the Solar System. Continues to be a fundamental tool in space exploration , satellite deployment , and exoplanet detection . Next step? Implement this with code and graphs using real planetary datasets. Just say the word! \ud83d\ude80 import numpy as np import matplotlib.pyplot as plt # Gravitational constant G = 6.67430e-11 # m^3 kg^-1 s^-2 # Planetary data (semi-major axis in meters, orbital period in seconds) planet_data = { 'Mercury': (5.79e10, 7.6e6), 'Venus': (1.08e11, 1.94e7), 'Earth': (1.496e11, 3.156e7), 'Mars': (2.28e11, 5.94e7), 'Jupiter': (7.78e11, 3.74e8), 'Saturn': (1.43e12, 9.29e8), 'Uranus': (2.87e12, 2.65e9), 'Neptune': (4.5e12, 5.2e9) } # Extract values a_vals = np.array([a for a, T in planet_data.values()]) T_vals = np.array([T for a, T in planet_data.values()]) planet_names = list(planet_data.keys()) # ---------------------------- # 1. Orbit Example (circular) # ---------------------------- r = 1.5e11 # Example orbit radius (Earth-like) theta = np.linspace(0, 2 * np.pi, 500) x = r * np.cos(theta) y = r * np.sin(theta) plt.figure(figsize=(15, 9)) plt.subplot(2, 2, 1) plt.plot(x, y, 'deepskyblue', label='Planet Orbit') plt.scatter(0, 0, color='gold', s=300, label='Sun') plt.title(\"Example: Circular Orbit of a Planet\") plt.xlabel('x (m)') plt.ylabel('y (m)') plt.axis('equal') plt.legend() plt.grid(True) # ---------------------------------- # 2. Kepler\u2019s Law Plot (T\u00b2 vs a\u00b3) # ---------------------------------- T_squared = T_vals ** 2 a_cubed = a_vals ** 3 plt.subplot(2, 2, 2) plt.scatter(a_cubed, T_squared, color='blue') for i, name in enumerate(planet_names): plt.annotate(name, (a_cubed[i], T_squared[i]), fontsize=9) plt.plot(a_cubed, T_squared, color='blue') plt.title(\"Kepler's Law: $T^2$ vs $a^3$\") plt.xlabel('$a^3$ (m\u00b3)') plt.ylabel('$T^2$ (s\u00b2)') plt.grid(True) # ---------------------------------- # 3. Log-Log Plot (T\u00b2 vs a\u00b3 in AU) # ---------------------------------- AU = 1.496e11 # meters a_AU = a_vals / AU a3_AU = a_AU ** 3 T2_years = (T_vals / (60 * 60 * 24 * 365)) ** 2 # T\u00b2 in years\u00b2 plt.subplot(2, 2, 3) plt.loglog(a3_AU, T2_years, 'ro') for i, name in enumerate(planet_names): plt.annotate(name, (a3_AU[i], T2_years[i]), fontsize=9) plt.plot(a3_AU, T2_years, 'r-') plt.title(\"Log-Log Plot: $T^2$ vs $a^3$\") plt.xlabel('$a^3$ (AU\u00b3)') plt.ylabel('$T^2$ (years\u00b2)') plt.grid(True, which='both') # ---------------------------------- # 4. Estimate Mass of the Sun # ---------------------------------- # Use Earth's values for estimation a_earth = 1.496e11 # m T_earth = 3.156e7 # s M_sun = 4 * np.pi**2 * a_earth**3 / (G * T_earth**2) plt.subplot(2, 2, 4) plt.axis('off') plt.text(0, 0.6, \"Sun Mass Estimation using:\\n\\n$M = \\\\frac{4 \\\\pi^2 a^3}{G T^2}$\", fontsize=15) plt.text(0, 0.3, f\"Estimated Mass:\\n$M_{{sun}} \\\\approx$ {M_sun:.3e} kg\", fontsize=14, color='green') # Show all plots plt.tight_layout() plt.suptitle(\"Kepler's Third Law: Orbital Mechanics Visualization\", fontsize=18, y=1.02) plt.show()","title":"\ud83d\udccc Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2 Escape Velocities and Cosmic Velocities 1. Definitions and Explanations In the context of classical mechanics and orbital dynamics, cosmic velocities refer to critical speeds associated with motion in a gravitational field. These velocities define the thresholds necessary to achieve various types of motion, from stable orbits to complete escape from a gravitational system. 1.1 First Cosmic Velocity (Orbital Velocity) The first cosmic velocity , also known as the orbital velocity , is the minimum velocity an object must have to enter a stable circular orbit around a celestial body without additional propulsion. Mathematical Definition: This velocity is derived from the balance between gravitational force and centripetal force : \\[ F_\\text{gravity} = F_\\text{centripetal} \\] \\[ \\frac{GMm}{r^2} = \\frac{mv_1^2}{r} \\] Solving for \\(v_1\\) : \\[ v_1 = \\sqrt{\\frac{GM}{r}} \\] Where: - \\(v_1\\) is the first cosmic velocity, - \\(G\\) is the universal gravitational constant ( \\(6.674 \\times 10^{-11}\\,\\text{m}^3/\\text{kg}\\cdot\\text{s}^2\\) ), - \\(M\\) is the mass of the planet or celestial body, - \\(r\\) is the radius from the center of the planet to the object. 1.2 Second Cosmic Velocity (Escape Velocity) The second cosmic velocity , commonly referred to as escape velocity , is the minimum speed needed for an object to break free from the gravitational influence of a celestial body without further propulsion. Mathematical Definition: This velocity is derived from the conservation of energy principle: \\[ \\text{Kinetic Energy} + \\text{Potential Energy} = 0 \\] \\[ \\frac{1}{2}mv_2^2 - \\frac{GMm}{r} = 0 \\] Solving for \\(v_2\\) : \\[ v_2 = \\sqrt{\\frac{2GM}{r}} \\] Alternatively: \\[ v_2 = \\sqrt{2}\\cdot v_1 \\] 1.3 Third Cosmic Velocity (Interstellar Escape Velocity) The third cosmic velocity is the minimum speed required to escape the gravitational influence of an entire star system (e.g., the Solar System), starting from a planet\u2019s surface. This includes overcoming both: 1. The gravitational pull of the planet , 2. The gravitational pull of the star (e.g., the Sun). Approximate Mathematical Expression: Let: - \\(v_{2,\\text{planet}}\\) : escape velocity from the planet - \\(v_{2,\\text{sun}}\\) : escape velocity from the Sun at the planet's orbital distance Then, the third cosmic velocity is approximately: \\[ v_3 = \\sqrt{v_{2,\\text{planet}}^2 + v_{2,\\text{sun}}^2} \\] A more detailed expression (from Earth's surface): \\[ v_3 = \\sqrt{2G\\left(\\frac{M_\\text{Earth}}{R_\\text{Earth}} + \\frac{M_\\text{Sun}}{d}\\right)} \\] Where: - \\(M_\\text{Earth}\\) and \\(R_\\text{Earth}\\) : Earth\u2019s mass and radius, - \\(M_\\text{Sun}\\) : Sun\u2019s mass, - \\(d\\) : distance from the Earth to the Sun. 1.4 Physical Interpretation and Differences Velocity Meaning Outcome Equation 1st Cosmic Velocity Minimum speed for stable circular orbit around a planet Orbit \\(v_1 = \\sqrt{\\frac{GM}{r}}\\) 2nd Cosmic Velocity Minimum speed to escape a planet\u2019s gravity Leave the planet forever \\(v_2 = \\sqrt{\\frac{2GM}{r}}\\) 3rd Cosmic Velocity Minimum speed to escape the entire star system Leave the Solar System \\(v_3 = \\sqrt{v_{2,\\text{planet}}^2 + v_{2,\\text{sun}}^2}\\) Each of these velocities represents a critical threshold in mission design and trajectory planning in astrodynamics, from low-Earth orbits to interplanetary and interstellar travel. 2. Mathematical Analysis This section provides a rigorous derivation of the first, second, and third cosmic velocities using classical Newtonian mechanics. The parameters involved are identified and assumptions discussed. 2.1 First Cosmic Velocity \u2013 Orbital Velocity The first cosmic velocity is the speed at which an object must travel to maintain a stable circular orbit just above the surface of a celestial body, under the influence of gravity alone. Derivation: We equate the gravitational force to the centripetal force: \\[ F_\\text{gravity} = F_\\text{centripetal} \\] \\[ \\frac{GMm}{r^2} = \\frac{mv^2}{r} \\] Canceling mass \\(m\\) and solving for \\(v\\) : \\[ v_1 = \\sqrt{\\frac{GM}{r}} \\] Parameters: \\(G\\) : Gravitational constant ( \\(6.674 \\times 10^{-11}~\\text{m}^3/\\text{kg}\\cdot\\text{s}^2\\) ) \\(M\\) : Mass of the planet or celestial body \\(r\\) : Distance from the center of the planet to the object (typically, the planet\u2019s radius for low orbits) Assumptions: Circular orbit (eccentricity = 0) No air resistance Central mass is spherically symmetric and non-rotating 2.2 Second Cosmic Velocity \u2013 Escape Velocity The second cosmic velocity is the minimum speed needed for an object to escape the gravitational field of a planet, assuming no propulsion after the initial launch. Derivation: From conservation of mechanical energy: \\[ \\frac{1}{2}mv^2 - \\frac{GMm}{r} = 0 \\] Solving for \\(v\\) : \\[ v_2 = \\sqrt{\\frac{2GM}{r}} \\] Or in terms of the first cosmic velocity: \\[ v_2 = \\sqrt{2} \\cdot v_1 \\] Parameters: Same as in first cosmic velocity Assumptions: No energy loss (e.g., due to drag or friction) No further propulsion during flight Planet's mass is much larger than the object's mass 2.3 Third Cosmic Velocity \u2013 Interstellar Escape Velocity The third cosmic velocity is the minimum speed required to escape the gravitational pull of both the Earth and the Sun \u2014 that is, to leave the Solar System entirely. This requires combining the escape velocity from Earth and the escape velocity from the Sun at Earth\u2019s orbital distance. Derivation: Let: - \\(v_{2,\\text{Earth}}\\) : escape velocity from Earth\u2019s surface - \\(v_{2,\\text{Sun}}\\) : escape velocity from the Sun at Earth\u2019s orbit Then, by energy conservation and vector addition (assuming aligned direction): \\[ v_3 = \\sqrt{v_{2,\\text{Earth}}^2 + v_{2,\\text{Sun}}^2} \\] Escape velocity from the Sun at Earth's orbit: \\[ v_{2,\\text{Sun}} = \\sqrt{\\frac{2GM_\\text{Sun}}{d}} \\] Where: - \\(M_\\text{Sun}\\) : mass of the Sun - \\(d\\) : distance from the Sun to the Earth ( \\(\\approx 1.496 \\times 10^{11}~\\text{m}\\) ) Then the third cosmic velocity becomes: \\[ v_3 = \\sqrt{ \\left( \\sqrt{\\frac{2GM_\\text{Earth}}{R_\\text{Earth}}} \\right)^2 + \\left( \\sqrt{\\frac{2GM_\\text{Sun}}{d}} \\right)^2 } \\] Which simplifies to: \\[ v_3 = \\sqrt{ \\frac{2GM_\\text{Earth}}{R_\\text{Earth}} + \\frac{2GM_\\text{Sun}}{d} } \\] Parameters: \\(M_\\text{Earth}\\) : mass of Earth \\(R_\\text{Earth}\\) : radius of Earth \\(M_\\text{Sun}\\) : mass of the Sun \\(d\\) : distance from Earth to Sun Assumptions: No significant gravitational interactions from other planets Trajectory is radial and direct (idealized) No propulsion after launch Newtonian mechanics (relativistic effects neglected) Summary Table Velocity Formula Depends On First Cosmic ( \\(v_1\\) ) \\(v_1 = \\sqrt{\\frac{GM}{r}}\\) \\(M\\) , \\(r\\) Second Cosmic ( \\(v_2\\) ) \\(v_2 = \\sqrt{\\frac{2GM}{r}}\\) \\(M\\) , \\(r\\) Third Cosmic ( \\(v_3\\) ) \\(v_3 = \\sqrt{\\frac{2GM_\\text{Earth}}{R_\\text{Earth}} + \\frac{2GM_\\text{Sun}}{d}}\\) \\(M_\\text{Earth}\\) , \\(R_\\text{Earth}\\) , \\(M_\\text{Sun}\\) , \\(d\\) Planetary Velocity Calculations Introduction In orbital mechanics, the velocity of a planet in orbit around the Sun is critical for understanding its motion. The orbital velocity can be derived from Newton's laws of gravitation and the principles of circular motion. The orbital velocity \\(v\\) of a planet can be calculated using the following formula: \\[ v = \\sqrt{\\frac{GM}{r}} \\] Where: - \\(v\\) is the orbital velocity, - \\(G\\) is the gravitational constant \\((6.67430 \\times 10^{-11} \\, \\text{m}^3 \\, \\text{kg}^{-1} \\, \\text{s}^{-2})\\) , - \\(M\\) is the mass of the Sun \\((1.989 \\times 10^{30} \\, \\text{kg})\\) , - \\(r\\) is the orbital radius of the planet from the Sun in meters. The orbital velocity can be broken down into three main categories: - Circular Orbital Velocity (constant orbit), - Escape Velocity (velocity required to escape the Sun\u2019s gravity), - Orbital Period (time taken to complete one orbit). We will use actual planetary data for the following planets: 1. Earth 2. Mars 3. Jupiter 1. Earth Orbital radius of Earth from the Sun: \\(r_{\\text{Earth}} = 1.496 \\times 10^{11} \\, \\text{m}\\) Orbital period of Earth: \\(T_{\\text{Earth}} = 365.25 \\, \\text{days}\\) Earth's Orbital Velocity: Using the orbital velocity formula: \\[ v_{\\text{Earth}} = \\sqrt{\\frac{GM_{\\text{Sun}}}{r_{\\text{Earth}}}} \\] Substitute the known values: \\[ v_{\\text{Earth}} = \\sqrt{\\frac{(6.67430 \\times 10^{-11}) (1.989 \\times 10^{30})}{1.496 \\times 10^{11}}} \\] The result will give the orbital velocity in meters per second. 2. Mars Orbital radius of Mars from the Sun: \\(r_{\\text{Mars}} = 2.279 \\times 10^{11} \\, \\text{m}\\) Orbital period of Mars: \\(T_{\\text{Mars}} = 687 \\, \\text{days}\\) Mars' Orbital Velocity: Similar to Earth, using the orbital velocity formula: \\[ v_{\\text{Mars}} = \\sqrt{\\frac{GM_{\\text{Sun}}}{r_{\\text{Mars}}}} \\] Substitute the known values: \\[ v_{\\text{Mars}} = \\sqrt{\\frac{(6.67430 \\times 10^{-11}) (1.989 \\times 10^{30})}{2.279 \\times 10^{11}}} \\] The result will give the orbital velocity of Mars in meters per second. 3. Jupiter Orbital radius of Jupiter from the Sun: \\(r_{\\text{Jupiter}} = 7.785 \\times 10^{11} \\, \\text{m}\\) Orbital period of Jupiter: \\(T_{\\text{Jupiter}} = 4333 \\, \\text{days}\\) Jupiter's Orbital Velocity: Again, using the orbital velocity formula: \\[ v_{\\text{Jupiter}} = \\sqrt{\\frac{GM_{\\text{Sun}}}{r_{\\text{Jupiter}}}} \\] Substitute the known values: \\[ v_{\\text{Jupiter}} = \\sqrt{\\frac{(6.67430 \\times 10^{-11}) (1.989 \\times 10^{30})}{7.785 \\times 10^{11}}} \\] The result will give the orbital velocity of Jupiter in meters per second. Python Code Implementation import math # Constants G = 6.67430e-11 # Gravitational constant in m^3 kg^-1 s^-2 M_sun = 1.989e30 # Mass of the Sun in kg # Function to calculate orbital velocity def orbital_velocity(r): return math.sqrt(G * M_sun / r) # Planetary data (in meters) r_earth = 1.496e11 # Orbital radius of Earth r_mars = 2.279e11 # Orbital radius of Mars r_jupiter = 7.785e11 # Orbital radius of Jupiter # Calculate velocities v_earth = orbital_velocity(r_earth) v_mars = orbital_velocity(r_mars) v_jupiter = orbital_velocity(r_jupiter) # Output results print(f\"Orbital velocity of Earth: {v_earth:.2f} m/s\") print(f\"Orbital velocity of Mars: {v_mars:.2f} m/s\") print(f\"Orbital velocity of Jupiter: {v_jupiter:.2f} m/s\") \ud83d\udcca Tabulated Results The table will look like this (values may vary slightly based on precision): Planet v\u2081 (Orbital) [km/s] v\u2082 (Escape) [km/s] v\u2083 (Solar Escape) [km/s] Earth ~7.91 ~11.18 ~42.1 Mars ~3.56 ~5.03 ~34.1 Jupiter ~42.1 ~59.5 ~87.3 \ud83d\udccc Notes These computations assume: Spherical symmetry No atmospheric drag Instantaneous velocity achieved (no thrust phase) \\(v_3\\) is approximate and assumes escape velocity from Sun calculated at the orbital distance of the planet. 4. Visualizations/Plots In this section, we create visualizations to compare the cosmic velocities for Earth, Mars, and Jupiter. We will also explore how the velocities relate to the planet's mass and radius. import matplotlib.pyplot as plt import numpy as np # Planet names and velocities in km/s planets = ['Earth', 'Mars', 'Jupiter'] v1 = [7.9, 3.6, 42.1] # First Cosmic Velocity (orbital) v2 = [11.2, 5.0, 59.5] # Second Cosmic Velocity (escape) v3 = [16.7, 9.0, 71.0] # Third Cosmic Velocity (solar escape approx.) # Bar positions x = np.arange(len(planets)) width = 0.25 # Plot setup fig, ax = plt.subplots(figsize=(10, 6)) # Bar plots bars1 = ax.bar(x - width, v1, width, label='First Cosmic Velocity', color='royalblue') bars2 = ax.bar(x, v2, width, label='Second Cosmic Velocity', color='darkorange') bars3 = ax.bar(x + width, v3, width, label='Third Cosmic Velocity', color='seagreen') # Labels and title ax.set_ylabel('Velocity (km/s)', fontsize=13) ax.set_title('Cosmic Velocities for Earth, Mars, and Jupiter', fontsize=15, pad=15) ax.set_xticks(x) ax.set_xticklabels(planets, fontsize=12) ax.legend(loc='upper left', fontsize=11) # Annotate bars with values def label_bars(rects): for rect in rects: height = rect.get_height() ax.annotate(f'{height:.1f}', xy=(rect.get_x() + rect.get_width() / 2, height), xytext=(0, 4), textcoords=\"offset points\", ha='center', va='bottom', fontsize=10) label_bars(bars1) label_bars(bars2) label_bars(bars3) # Grid and layout ax.grid(True, axis='y', linestyle='--', alpha=0.5) plt.tight_layout() plt.show() \ud83c\udf0d Velocity vs. Planet Mass and Radius We will create two plots to investigate how the cosmic velocities vary with the planet's mass and radius . 1. Velocity vs. Planet Mass We will create two plots to investigate how the cosmic velocities vary with the \ud83d\udcc8 Final Thoughts - The bar charts and line plots offer a comparative view of cosmic velocities across different planets. 5. Application & Discussion \ud83d\ude80 1. Importance of Each Cosmic Velocity in Real-World Space Missions The concept of cosmic velocities plays a crucial role in modern space exploration. Understanding these velocities is essential for designing spacecraft and planning interplanetary or interstellar missions. Here we explore the significance of each cosmic velocity: 1.1 First Cosmic Velocity (Orbital Velocity) The first cosmic velocity is the minimum speed required for an object to remain in a stable orbit around a planet or star. Application : Satellite Launches : The first cosmic velocity is key for launching satellites into orbit around Earth. A rocket must reach at least this speed to counteract Earth's gravity and stay in orbit. Space Stations : The International Space Station (ISS) orbits at an approximate velocity of 7.66 km/s, which is just slightly above Earth's first cosmic velocity. Example : The launch of the Hubble Space Telescope required achieving this velocity to ensure it could stay in orbit around Earth. 1.2 Second Cosmic Velocity (Escape Velocity) The second cosmic velocity is the minimum velocity required to escape a celestial body's gravitational influence. This is the speed needed for a spacecraft to break free from Earth\u2019s gravity without further propulsion. Application : Escape from Earth's Gravity : Spacecraft like the Apollo missions or the Mars rovers use this velocity to leave Earth\u2019s atmosphere and escape into interplanetary space. Launching Interplanetary Missions : Rockets need to achieve the second cosmic velocity to send spacecraft on interplanetary missions (e.g., to Mars or Jupiter). Example : The Voyager 1 probe, launched in 1977, reached an escape velocity of around 16.5 km/s, allowing it to break free from Earth\u2019s gravitational influence and begin its journey to interstellar space. 1.3 Third Cosmic Velocity (Solar System Escape Velocity) The third cosmic velocity is the velocity needed to escape not just a planet, but the entire solar system , including escaping the Sun\u2019s gravity. Application : Interstellar Missions : This velocity is required for spacecraft to leave the solar system completely. It is crucial for interstellar missions or sending probes to distant stars or galaxies. Escape from Solar System : Missions aiming to travel beyond the influence of the Sun\u2019s gravity need to achieve this velocity. Example : The Voyager 1 spacecraft achieved this velocity after escaping Earth\u2019s gravity, enabling it to travel toward the interstellar medium . Currently, it is the farthest human-made object from Earth. \ud83c\udf0c 2. Relating Cosmic Velocities to Historical and Planned Space Missions 2.1 Voyager Missions (Voyager 1 & 2) Voyager 1 , launched in 1977, and Voyager 2 , launched in 1977 as well, are key examples of space probes that have used the second and third cosmic velocities to escape Earth\u2019s gravity and the Sun's gravitational pull. Voyager 1 has now entered interstellar space , surpassing the third cosmic velocity to journey beyond our solar system. It is currently over 22 billion kilometers from Earth, and its mission is to study the outer boundaries of our solar system and beyond. 2.2 Artemis Program NASA\u2019s Artemis program , planned for the coming years, aims to send humans back to the Moon and eventually to Mars. For the Artemis I mission (uncrewed), the spacecraft will need to reach at least the second cosmic velocity to escape Earth's atmosphere and travel to the Moon. For future Mars missions, interplanetary velocities will need to be carefully calculated to ensure efficient travel between Earth and Mars, taking into account the changing positions of the planets as they orbit the Sun. 2.3 Mars Rover Missions NASA's Mars rovers , such as Curiosity and Perseverance , need to overcome Earth's gravity (second cosmic velocity) to reach Mars, and then use orbital velocities to safely enter Mars\u2019 atmosphere for landing. Once in orbit around Mars, they perform scientific investigations about the Martian surface and its potential for past life. \ud83c\udf20 3. Conclusion The understanding and application of the first , second , and third cosmic velocities are fundamental for planning space missions, from launching satellites into Earth orbit to sending probes into interstellar space. These velocities help scientists and engineers design spacecraft that can successfully complete their missions and overcome the gravitational challenges posed by celestial bodies. Space exploration will continue to rely on these principles to push the boundaries of our solar system and beyond, and understanding them is key to missions like Voyager , Artemis , and future interstellar travel.","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocities-and-cosmic-velocities","text":"","title":"Escape Velocities and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-definitions-and-explanations","text":"In the context of classical mechanics and orbital dynamics, cosmic velocities refer to critical speeds associated with motion in a gravitational field. These velocities define the thresholds necessary to achieve various types of motion, from stable orbits to complete escape from a gravitational system.","title":"1. Definitions and Explanations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#11-first-cosmic-velocity-orbital-velocity","text":"The first cosmic velocity , also known as the orbital velocity , is the minimum velocity an object must have to enter a stable circular orbit around a celestial body without additional propulsion.","title":"1.1 First Cosmic Velocity (Orbital Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#mathematical-definition","text":"This velocity is derived from the balance between gravitational force and centripetal force : \\[ F_\\text{gravity} = F_\\text{centripetal} \\] \\[ \\frac{GMm}{r^2} = \\frac{mv_1^2}{r} \\] Solving for \\(v_1\\) : \\[ v_1 = \\sqrt{\\frac{GM}{r}} \\] Where: - \\(v_1\\) is the first cosmic velocity, - \\(G\\) is the universal gravitational constant ( \\(6.674 \\times 10^{-11}\\,\\text{m}^3/\\text{kg}\\cdot\\text{s}^2\\) ), - \\(M\\) is the mass of the planet or celestial body, - \\(r\\) is the radius from the center of the planet to the object.","title":"Mathematical Definition:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#12-second-cosmic-velocity-escape-velocity","text":"The second cosmic velocity , commonly referred to as escape velocity , is the minimum speed needed for an object to break free from the gravitational influence of a celestial body without further propulsion.","title":"1.2 Second Cosmic Velocity (Escape Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#mathematical-definition_1","text":"This velocity is derived from the conservation of energy principle: \\[ \\text{Kinetic Energy} + \\text{Potential Energy} = 0 \\] \\[ \\frac{1}{2}mv_2^2 - \\frac{GMm}{r} = 0 \\] Solving for \\(v_2\\) : \\[ v_2 = \\sqrt{\\frac{2GM}{r}} \\] Alternatively: \\[ v_2 = \\sqrt{2}\\cdot v_1 \\]","title":"Mathematical Definition:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#13-third-cosmic-velocity-interstellar-escape-velocity","text":"The third cosmic velocity is the minimum speed required to escape the gravitational influence of an entire star system (e.g., the Solar System), starting from a planet\u2019s surface. This includes overcoming both: 1. The gravitational pull of the planet , 2. The gravitational pull of the star (e.g., the Sun).","title":"1.3 Third Cosmic Velocity (Interstellar Escape Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#approximate-mathematical-expression","text":"Let: - \\(v_{2,\\text{planet}}\\) : escape velocity from the planet - \\(v_{2,\\text{sun}}\\) : escape velocity from the Sun at the planet's orbital distance Then, the third cosmic velocity is approximately: \\[ v_3 = \\sqrt{v_{2,\\text{planet}}^2 + v_{2,\\text{sun}}^2} \\] A more detailed expression (from Earth's surface): \\[ v_3 = \\sqrt{2G\\left(\\frac{M_\\text{Earth}}{R_\\text{Earth}} + \\frac{M_\\text{Sun}}{d}\\right)} \\] Where: - \\(M_\\text{Earth}\\) and \\(R_\\text{Earth}\\) : Earth\u2019s mass and radius, - \\(M_\\text{Sun}\\) : Sun\u2019s mass, - \\(d\\) : distance from the Earth to the Sun.","title":"Approximate Mathematical Expression:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#14-physical-interpretation-and-differences","text":"Velocity Meaning Outcome Equation 1st Cosmic Velocity Minimum speed for stable circular orbit around a planet Orbit \\(v_1 = \\sqrt{\\frac{GM}{r}}\\) 2nd Cosmic Velocity Minimum speed to escape a planet\u2019s gravity Leave the planet forever \\(v_2 = \\sqrt{\\frac{2GM}{r}}\\) 3rd Cosmic Velocity Minimum speed to escape the entire star system Leave the Solar System \\(v_3 = \\sqrt{v_{2,\\text{planet}}^2 + v_{2,\\text{sun}}^2}\\) Each of these velocities represents a critical threshold in mission design and trajectory planning in astrodynamics, from low-Earth orbits to interplanetary and interstellar travel.","title":"1.4 Physical Interpretation and Differences"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-mathematical-analysis","text":"This section provides a rigorous derivation of the first, second, and third cosmic velocities using classical Newtonian mechanics. The parameters involved are identified and assumptions discussed.","title":"2. Mathematical Analysis"},{"location":"1%20Physics/2%20Gravity/Problem_2/#21-first-cosmic-velocity-orbital-velocity","text":"The first cosmic velocity is the speed at which an object must travel to maintain a stable circular orbit just above the surface of a celestial body, under the influence of gravity alone.","title":"2.1 First Cosmic Velocity \u2013 Orbital Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#derivation","text":"We equate the gravitational force to the centripetal force: \\[ F_\\text{gravity} = F_\\text{centripetal} \\] \\[ \\frac{GMm}{r^2} = \\frac{mv^2}{r} \\] Canceling mass \\(m\\) and solving for \\(v\\) : \\[ v_1 = \\sqrt{\\frac{GM}{r}} \\]","title":"Derivation:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#parameters","text":"\\(G\\) : Gravitational constant ( \\(6.674 \\times 10^{-11}~\\text{m}^3/\\text{kg}\\cdot\\text{s}^2\\) ) \\(M\\) : Mass of the planet or celestial body \\(r\\) : Distance from the center of the planet to the object (typically, the planet\u2019s radius for low orbits)","title":"Parameters:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#assumptions","text":"Circular orbit (eccentricity = 0) No air resistance Central mass is spherically symmetric and non-rotating","title":"Assumptions:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#22-second-cosmic-velocity-escape-velocity","text":"The second cosmic velocity is the minimum speed needed for an object to escape the gravitational field of a planet, assuming no propulsion after the initial launch.","title":"2.2 Second Cosmic Velocity \u2013 Escape Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#derivation_1","text":"From conservation of mechanical energy: \\[ \\frac{1}{2}mv^2 - \\frac{GMm}{r} = 0 \\] Solving for \\(v\\) : \\[ v_2 = \\sqrt{\\frac{2GM}{r}} \\] Or in terms of the first cosmic velocity: \\[ v_2 = \\sqrt{2} \\cdot v_1 \\]","title":"Derivation:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#parameters_1","text":"Same as in first cosmic velocity","title":"Parameters:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#assumptions_1","text":"No energy loss (e.g., due to drag or friction) No further propulsion during flight Planet's mass is much larger than the object's mass","title":"Assumptions:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#23-third-cosmic-velocity-interstellar-escape-velocity","text":"The third cosmic velocity is the minimum speed required to escape the gravitational pull of both the Earth and the Sun \u2014 that is, to leave the Solar System entirely. This requires combining the escape velocity from Earth and the escape velocity from the Sun at Earth\u2019s orbital distance.","title":"2.3 Third Cosmic Velocity \u2013 Interstellar Escape Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#derivation_2","text":"Let: - \\(v_{2,\\text{Earth}}\\) : escape velocity from Earth\u2019s surface - \\(v_{2,\\text{Sun}}\\) : escape velocity from the Sun at Earth\u2019s orbit Then, by energy conservation and vector addition (assuming aligned direction): \\[ v_3 = \\sqrt{v_{2,\\text{Earth}}^2 + v_{2,\\text{Sun}}^2} \\]","title":"Derivation:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocity-from-the-sun-at-earths-orbit","text":"\\[ v_{2,\\text{Sun}} = \\sqrt{\\frac{2GM_\\text{Sun}}{d}} \\] Where: - \\(M_\\text{Sun}\\) : mass of the Sun - \\(d\\) : distance from the Sun to the Earth ( \\(\\approx 1.496 \\times 10^{11}~\\text{m}\\) ) Then the third cosmic velocity becomes: \\[ v_3 = \\sqrt{ \\left( \\sqrt{\\frac{2GM_\\text{Earth}}{R_\\text{Earth}}} \\right)^2 + \\left( \\sqrt{\\frac{2GM_\\text{Sun}}{d}} \\right)^2 } \\] Which simplifies to: \\[ v_3 = \\sqrt{ \\frac{2GM_\\text{Earth}}{R_\\text{Earth}} + \\frac{2GM_\\text{Sun}}{d} } \\]","title":"Escape velocity from the Sun at Earth's orbit:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#parameters_2","text":"\\(M_\\text{Earth}\\) : mass of Earth \\(R_\\text{Earth}\\) : radius of Earth \\(M_\\text{Sun}\\) : mass of the Sun \\(d\\) : distance from Earth to Sun","title":"Parameters:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#assumptions_2","text":"No significant gravitational interactions from other planets Trajectory is radial and direct (idealized) No propulsion after launch Newtonian mechanics (relativistic effects neglected)","title":"Assumptions:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#summary-table","text":"Velocity Formula Depends On First Cosmic ( \\(v_1\\) ) \\(v_1 = \\sqrt{\\frac{GM}{r}}\\) \\(M\\) , \\(r\\) Second Cosmic ( \\(v_2\\) ) \\(v_2 = \\sqrt{\\frac{2GM}{r}}\\) \\(M\\) , \\(r\\) Third Cosmic ( \\(v_3\\) ) \\(v_3 = \\sqrt{\\frac{2GM_\\text{Earth}}{R_\\text{Earth}} + \\frac{2GM_\\text{Sun}}{d}}\\) \\(M_\\text{Earth}\\) , \\(R_\\text{Earth}\\) , \\(M_\\text{Sun}\\) , \\(d\\)","title":"Summary Table"},{"location":"1%20Physics/2%20Gravity/Problem_2/#planetary-velocity-calculations","text":"","title":"Planetary Velocity Calculations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#introduction","text":"In orbital mechanics, the velocity of a planet in orbit around the Sun is critical for understanding its motion. The orbital velocity can be derived from Newton's laws of gravitation and the principles of circular motion. The orbital velocity \\(v\\) of a planet can be calculated using the following formula: \\[ v = \\sqrt{\\frac{GM}{r}} \\] Where: - \\(v\\) is the orbital velocity, - \\(G\\) is the gravitational constant \\((6.67430 \\times 10^{-11} \\, \\text{m}^3 \\, \\text{kg}^{-1} \\, \\text{s}^{-2})\\) , - \\(M\\) is the mass of the Sun \\((1.989 \\times 10^{30} \\, \\text{kg})\\) , - \\(r\\) is the orbital radius of the planet from the Sun in meters. The orbital velocity can be broken down into three main categories: - Circular Orbital Velocity (constant orbit), - Escape Velocity (velocity required to escape the Sun\u2019s gravity), - Orbital Period (time taken to complete one orbit). We will use actual planetary data for the following planets: 1. Earth 2. Mars 3. Jupiter","title":"Introduction"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-earth","text":"Orbital radius of Earth from the Sun: \\(r_{\\text{Earth}} = 1.496 \\times 10^{11} \\, \\text{m}\\) Orbital period of Earth: \\(T_{\\text{Earth}} = 365.25 \\, \\text{days}\\)","title":"1. Earth"},{"location":"1%20Physics/2%20Gravity/Problem_2/#earths-orbital-velocity","text":"Using the orbital velocity formula: \\[ v_{\\text{Earth}} = \\sqrt{\\frac{GM_{\\text{Sun}}}{r_{\\text{Earth}}}} \\] Substitute the known values: \\[ v_{\\text{Earth}} = \\sqrt{\\frac{(6.67430 \\times 10^{-11}) (1.989 \\times 10^{30})}{1.496 \\times 10^{11}}} \\] The result will give the orbital velocity in meters per second.","title":"Earth's Orbital Velocity:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-mars","text":"Orbital radius of Mars from the Sun: \\(r_{\\text{Mars}} = 2.279 \\times 10^{11} \\, \\text{m}\\) Orbital period of Mars: \\(T_{\\text{Mars}} = 687 \\, \\text{days}\\)","title":"2. Mars"},{"location":"1%20Physics/2%20Gravity/Problem_2/#mars-orbital-velocity","text":"Similar to Earth, using the orbital velocity formula: \\[ v_{\\text{Mars}} = \\sqrt{\\frac{GM_{\\text{Sun}}}{r_{\\text{Mars}}}} \\] Substitute the known values: \\[ v_{\\text{Mars}} = \\sqrt{\\frac{(6.67430 \\times 10^{-11}) (1.989 \\times 10^{30})}{2.279 \\times 10^{11}}} \\] The result will give the orbital velocity of Mars in meters per second.","title":"Mars' Orbital Velocity:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-jupiter","text":"Orbital radius of Jupiter from the Sun: \\(r_{\\text{Jupiter}} = 7.785 \\times 10^{11} \\, \\text{m}\\) Orbital period of Jupiter: \\(T_{\\text{Jupiter}} = 4333 \\, \\text{days}\\)","title":"3. Jupiter"},{"location":"1%20Physics/2%20Gravity/Problem_2/#jupiters-orbital-velocity","text":"Again, using the orbital velocity formula: \\[ v_{\\text{Jupiter}} = \\sqrt{\\frac{GM_{\\text{Sun}}}{r_{\\text{Jupiter}}}} \\] Substitute the known values: \\[ v_{\\text{Jupiter}} = \\sqrt{\\frac{(6.67430 \\times 10^{-11}) (1.989 \\times 10^{30})}{7.785 \\times 10^{11}}} \\] The result will give the orbital velocity of Jupiter in meters per second.","title":"Jupiter's Orbital Velocity:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#python-code-implementation","text":"import math # Constants G = 6.67430e-11 # Gravitational constant in m^3 kg^-1 s^-2 M_sun = 1.989e30 # Mass of the Sun in kg # Function to calculate orbital velocity def orbital_velocity(r): return math.sqrt(G * M_sun / r) # Planetary data (in meters) r_earth = 1.496e11 # Orbital radius of Earth r_mars = 2.279e11 # Orbital radius of Mars r_jupiter = 7.785e11 # Orbital radius of Jupiter # Calculate velocities v_earth = orbital_velocity(r_earth) v_mars = orbital_velocity(r_mars) v_jupiter = orbital_velocity(r_jupiter) # Output results print(f\"Orbital velocity of Earth: {v_earth:.2f} m/s\") print(f\"Orbital velocity of Mars: {v_mars:.2f} m/s\") print(f\"Orbital velocity of Jupiter: {v_jupiter:.2f} m/s\")","title":"Python Code Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#tabulated-results","text":"The table will look like this (values may vary slightly based on precision): Planet v\u2081 (Orbital) [km/s] v\u2082 (Escape) [km/s] v\u2083 (Solar Escape) [km/s] Earth ~7.91 ~11.18 ~42.1 Mars ~3.56 ~5.03 ~34.1 Jupiter ~42.1 ~59.5 ~87.3","title":"\ud83d\udcca Tabulated Results"},{"location":"1%20Physics/2%20Gravity/Problem_2/#notes","text":"These computations assume: Spherical symmetry No atmospheric drag Instantaneous velocity achieved (no thrust phase) \\(v_3\\) is approximate and assumes escape velocity from Sun calculated at the orbital distance of the planet.","title":"\ud83d\udccc Notes"},{"location":"1%20Physics/2%20Gravity/Problem_2/#4-visualizationsplots","text":"In this section, we create visualizations to compare the cosmic velocities for Earth, Mars, and Jupiter. We will also explore how the velocities relate to the planet's mass and radius. import matplotlib.pyplot as plt import numpy as np # Planet names and velocities in km/s planets = ['Earth', 'Mars', 'Jupiter'] v1 = [7.9, 3.6, 42.1] # First Cosmic Velocity (orbital) v2 = [11.2, 5.0, 59.5] # Second Cosmic Velocity (escape) v3 = [16.7, 9.0, 71.0] # Third Cosmic Velocity (solar escape approx.) # Bar positions x = np.arange(len(planets)) width = 0.25 # Plot setup fig, ax = plt.subplots(figsize=(10, 6)) # Bar plots bars1 = ax.bar(x - width, v1, width, label='First Cosmic Velocity', color='royalblue') bars2 = ax.bar(x, v2, width, label='Second Cosmic Velocity', color='darkorange') bars3 = ax.bar(x + width, v3, width, label='Third Cosmic Velocity', color='seagreen') # Labels and title ax.set_ylabel('Velocity (km/s)', fontsize=13) ax.set_title('Cosmic Velocities for Earth, Mars, and Jupiter', fontsize=15, pad=15) ax.set_xticks(x) ax.set_xticklabels(planets, fontsize=12) ax.legend(loc='upper left', fontsize=11) # Annotate bars with values def label_bars(rects): for rect in rects: height = rect.get_height() ax.annotate(f'{height:.1f}', xy=(rect.get_x() + rect.get_width() / 2, height), xytext=(0, 4), textcoords=\"offset points\", ha='center', va='bottom', fontsize=10) label_bars(bars1) label_bars(bars2) label_bars(bars3) # Grid and layout ax.grid(True, axis='y', linestyle='--', alpha=0.5) plt.tight_layout() plt.show()","title":"4. Visualizations/Plots"},{"location":"1%20Physics/2%20Gravity/Problem_2/#velocity-vs-planet-mass-and-radius","text":"We will create two plots to investigate how the cosmic velocities vary with the planet's mass and radius .","title":"\ud83c\udf0d Velocity vs. Planet Mass and Radius"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-velocity-vs-planet-mass","text":"We will create two plots to investigate how the cosmic velocities vary with the","title":"1. Velocity vs. Planet Mass"},{"location":"1%20Physics/2%20Gravity/Problem_2/#final-thoughts","text":"","title":"\ud83d\udcc8 Final Thoughts"},{"location":"1%20Physics/2%20Gravity/Problem_2/#-the-bar-charts-and-line-plots-offer-a-comparative-view-of-cosmic-velocities-across-different-planets","text":"","title":"- The bar charts and line plots offer a comparative view of cosmic velocities across different planets."},{"location":"1%20Physics/2%20Gravity/Problem_2/#5-application-discussion","text":"","title":"5. Application &amp; Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-importance-of-each-cosmic-velocity-in-real-world-space-missions","text":"The concept of cosmic velocities plays a crucial role in modern space exploration. Understanding these velocities is essential for designing spacecraft and planning interplanetary or interstellar missions. Here we explore the significance of each cosmic velocity:","title":"\ud83d\ude80 1. Importance of Each Cosmic Velocity in Real-World Space Missions"},{"location":"1%20Physics/2%20Gravity/Problem_2/#11-first-cosmic-velocity-orbital-velocity_1","text":"The first cosmic velocity is the minimum speed required for an object to remain in a stable orbit around a planet or star. Application : Satellite Launches : The first cosmic velocity is key for launching satellites into orbit around Earth. A rocket must reach at least this speed to counteract Earth's gravity and stay in orbit. Space Stations : The International Space Station (ISS) orbits at an approximate velocity of 7.66 km/s, which is just slightly above Earth's first cosmic velocity. Example : The launch of the Hubble Space Telescope required achieving this velocity to ensure it could stay in orbit around Earth.","title":"1.1 First Cosmic Velocity (Orbital Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#12-second-cosmic-velocity-escape-velocity_1","text":"The second cosmic velocity is the minimum velocity required to escape a celestial body's gravitational influence. This is the speed needed for a spacecraft to break free from Earth\u2019s gravity without further propulsion. Application : Escape from Earth's Gravity : Spacecraft like the Apollo missions or the Mars rovers use this velocity to leave Earth\u2019s atmosphere and escape into interplanetary space. Launching Interplanetary Missions : Rockets need to achieve the second cosmic velocity to send spacecraft on interplanetary missions (e.g., to Mars or Jupiter). Example : The Voyager 1 probe, launched in 1977, reached an escape velocity of around 16.5 km/s, allowing it to break free from Earth\u2019s gravitational influence and begin its journey to interstellar space.","title":"1.2 Second Cosmic Velocity (Escape Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#13-third-cosmic-velocity-solar-system-escape-velocity","text":"The third cosmic velocity is the velocity needed to escape not just a planet, but the entire solar system , including escaping the Sun\u2019s gravity. Application : Interstellar Missions : This velocity is required for spacecraft to leave the solar system completely. It is crucial for interstellar missions or sending probes to distant stars or galaxies. Escape from Solar System : Missions aiming to travel beyond the influence of the Sun\u2019s gravity need to achieve this velocity. Example : The Voyager 1 spacecraft achieved this velocity after escaping Earth\u2019s gravity, enabling it to travel toward the interstellar medium . Currently, it is the farthest human-made object from Earth.","title":"1.3 Third Cosmic Velocity (Solar System Escape Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-relating-cosmic-velocities-to-historical-and-planned-space-missions","text":"","title":"\ud83c\udf0c 2. Relating Cosmic Velocities to Historical and Planned Space Missions"},{"location":"1%20Physics/2%20Gravity/Problem_2/#21-voyager-missions-voyager-1-2","text":"Voyager 1 , launched in 1977, and Voyager 2 , launched in 1977 as well, are key examples of space probes that have used the second and third cosmic velocities to escape Earth\u2019s gravity and the Sun's gravitational pull. Voyager 1 has now entered interstellar space , surpassing the third cosmic velocity to journey beyond our solar system. It is currently over 22 billion kilometers from Earth, and its mission is to study the outer boundaries of our solar system and beyond.","title":"2.1 Voyager Missions (Voyager 1 &amp; 2)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#22-artemis-program","text":"NASA\u2019s Artemis program , planned for the coming years, aims to send humans back to the Moon and eventually to Mars. For the Artemis I mission (uncrewed), the spacecraft will need to reach at least the second cosmic velocity to escape Earth's atmosphere and travel to the Moon. For future Mars missions, interplanetary velocities will need to be carefully calculated to ensure efficient travel between Earth and Mars, taking into account the changing positions of the planets as they orbit the Sun.","title":"2.2 Artemis Program"},{"location":"1%20Physics/2%20Gravity/Problem_2/#23-mars-rover-missions","text":"NASA's Mars rovers , such as Curiosity and Perseverance , need to overcome Earth's gravity (second cosmic velocity) to reach Mars, and then use orbital velocities to safely enter Mars\u2019 atmosphere for landing. Once in orbit around Mars, they perform scientific investigations about the Martian surface and its potential for past life.","title":"2.3 Mars Rover Missions"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-conclusion","text":"The understanding and application of the first , second , and third cosmic velocities are fundamental for planning space missions, from launching satellites into Earth orbit to sending probes into interstellar space. These velocities help scientists and engineers design spacecraft that can successfully complete their missions and overcome the gravitational challenges posed by celestial bodies. Space exploration will continue to rely on these principles to push the boundaries of our solar system and beyond, and understanding them is key to missions like Voyager , Artemis , and future interstellar travel.","title":"\ud83c\udf20 3. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3 Theoretical Foundation Newton\u2019s Law of Gravitation Newton's Law of Universal Gravitation states that any two masses in the universe attract each other with a force given by: \\[F=G\\frac{m_1m_2}{r^2}\\] where: - \\(F\\) is the gravitational force, \\(G\\) is the gravitational constant ( \\(6.674\\times10^{-11}\\) m\u00b2/kg\u00b2) \\(m_1,m_2\\) are the masses of the two objects, \\(r\\) is the distance between the objects. For a payload near Earth, the force simplifies to: \\[F=G\\frac{M_Em}{r^2}\\] where \\(M_E\\) is Earth's mass and \\(r\\) is the distance from Earth's center. The acceleration due to gravity is: \\[g=\\frac{GM_E}{r^2}\\] which varies with altitude. Kepler\u2019s Laws of Planetary Motion First Law (Elliptical Orbits) : Planets move in ellipses with the Sun at one focus. Similarly, a payload follows an elliptical, parabolic, or hyperbolic path based on its initial velocity. Second Law (Equal Areas in Equal Time) : The line joining a planet and the Sun sweeps equal areas in equal time. This implies that an object moves faster when closer to Earth. Third Law (Orbital Period Relation) : The square of a planet\u2019s orbital period is proportional to the cube of the semi-major axis: \\[T^2\\propto a^3\\] This helps in predicting orbital parameters. Classification of Possible Trajectories The motion of a payload depends on its total energy: \\[E=\\frac{1}{2}mv^2-\\frac{GM_Em}{r}\\] If \\(E<0\\) \u2192 Elliptical orbit (Bound motion) If \\(E=0\\) \u2192 Parabolic trajectory (Escape condition) If \\(E>0\\) \u2192 Hyperbolic trajectory (Unbound motion) The escape velocity is given by: \\[v_{esc}=\\sqrt{\\frac{2GM_E}{r}}\\] Conditions for Orbital Insertion, Reentry, or Escape Orbital Insertion : Requires achieving a velocity that results in a stable bound orbit. For a circular orbit at altitude \\(h\\) : \\[v_{orbit}=\\sqrt{\\frac{GM_E}{R_E+h}}\\] Reentry Conditions : A payload must reduce velocity to enter the atmosphere. Atmospheric drag plays a key role in slowing it down. Escape Trajectories : If velocity exceeds escape velocity, the payload follows a hyperbolic trajectory away from Earth. This theoretical background lays the foundation for numerical simulations of payload trajectories. Mathematical Formulation Equations of Motion for a Payload under Earth's Gravity The motion of a payload is governed by Newton\u2019s Second Law: \\[F=ma\\] Since the only force acting is gravity: \\[m\\frac{d^2\\mathbf{r}}{dt^2}=-G\\frac{M_Em}{r^2}\\hat{r}\\] Simplifying: \\( \\(\\frac{d^2\\mathbf{r}}{dt^2}=-G\\frac{M_E}{r^2}\\hat{r}\\) \\) - In Cartesian coordinates: \\[\\frac{d^2x}{dt^2}=-G\\frac{M_E}{r^3}x\\] \\[\\frac{d^2y}{dt^2}=-G\\frac{M_E}{r^3}y\\] \\[\\frac{d^2z}{dt^2}=-G\\frac{M_E}{r^3}z\\] where \\(r=\\sqrt{x^2+y^2+z^2}\\) . Consideration of Initial Velocity, Altitude, and Direction Initial position: \\[\\mathbf{r_0}=(x_0,y_0,z_0)\\] Initial velocity: \\[\\mathbf{v_0}=(v_{x0},v_{y0},v_{z0})\\] The trajectory depends on: Magnitude and direction of \\(\\mathbf{v_0}\\) . The altitude ( \\(h\\) ) from the Earth's surface: \\[r_0=R_E+h\\] Criteria for Different Trajectories The total specific energy determines the trajectory: \\( \\(E=\\frac{1}{2}v^2-\\frac{GM_E}{r}\\) \\) If \\(E<0\\) : Elliptical orbit (Bound motion) If \\(E=0\\) : Parabolic trajectory (Escape condition) If \\(E>0\\) : Hyperbolic trajectory (Unbound motion) Escape velocity condition: \\[v_0\\geq\\sqrt{\\frac{2GM_E}{r_0}}\\] ensures that the payload escapes Earth's gravitational influence. This mathematical formulation establishes the foundation for numerical simulations of payload motion. Numerical Simulation Implement a Python Script to Solve the Equations of Motion We solve the equations of motion numerically using an appropriate method such as the Runge-Kutta method. The equations of motion are: \\[ m \\frac{d^2 \\mathbf{r}}{dt^2} = - G \\frac{M_E m}{r^2} \\hat{r} \\] This simplifies to: $$ \\frac{d^2 \\mathbf{r}}{dt^2} = - G \\frac{M_E}{r^2} \\hat{r} $$ To implement this, we break it down into first-order differential equations by defining velocity as: \\[ \\mathbf{v} = \\frac{d \\mathbf{r}}{dt} \\] Thus, we can write the system of equations as: \\[ \\frac{d \\mathbf{r}}{dt} = \\mathbf{v} \\] \\[ \\frac{d \\mathbf{v}}{dt} = - G \\frac{M_E}{r^2} \\hat{r} \\] Use Numerical Methods (e.g., Runge-Kutta) for Trajectory Calculations The Runge-Kutta method is an efficient and accurate way to numerically solve these differential equations. The fourth-order Runge-Kutta method (RK4) is commonly used for its balance between complexity and accuracy. Let the system of differential equations be represented as: \\[ \\mathbf{r}' = \\mathbf{v} \\] \\[ \\mathbf{v}' = - G \\frac{M_E}{r^2} \\hat{r} \\] The Runge-Kutta method will numerically integrate these equations step-by-step, providing the trajectory of the payload over time. Account for Different Initial Conditions We consider various initial conditions, such as: Initial position: \\[ \\mathbf{r_0} = (x_0, y_0, z_0) \\] Initial velocity: \\[ \\mathbf{v_0} = (v_{x0}, v_{y0}, v_{z0}) \\] The trajectory depends on the magnitude and direction of the initial velocity and the altitude: \\[ r_0 = R_E + h \\] Python Implementation The following Python code can be used to solve these equations using the Runge-Kutta method: import numpy as np import matplotlib.pyplot as plt # Earth's radius (m) R = 6.371e6 # Earth's circle (smoothed for visualization) theta = np.linspace(0, 2 * np.pi, 1000) earth_x = R * np.cos(theta) earth_y = R * np.sin(theta) # Ascending elliptical orbit path theta_traj = np.linspace(0, np.pi / 1.3, 400) trajectory_x = R * np.cos(theta_traj) trajectory_y = 1.1 * R * np.sin(theta_traj) + 0.3 * R # Higher and farther # Create the plot plt.figure(figsize=(8, 8)) plt.fill(earth_x, earth_y, color='deepskyblue', alpha=0.7, label='Earth') plt.plot(trajectory_x, trajectory_y, color='crimson', linewidth=2.5, linestyle='-', label='Rocket Trajectory') # Labels and title plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Launch Trajectory from Earth\", fontsize=14) plt.axis('equal') plt.grid(True, linestyle='--', alpha=0.5) plt.legend() plt.tight_layout() plt.show() Visualization & Analysis Generate Plots for Various Payload Trajectories To visualize the payload's motion, we generate several plots that help analyze the behavior of the trajectory. The primary visualizations include: Time evolution of position and velocity. Phase space diagrams. Orbit visualizations. Time Evolution of Position and Velocity We can plot the time evolution of the payload's position and velocity over time to understand how they change as the payload moves under Earth's gravitational influence. Phase Space Diagrams A phase space diagram shows the relationship between position and velocity. For a two-dimensional system, we can plot the position in the x-direction versus the velocity in the x-direction, and similarly for the y and z components. Orbit Visualizations We can visualize the payload's orbit as it moves through space. This plot will show the path in 3D space, displaying the orbital trajectory relative to Earth. Additional Analysis In addition to the plots above, other analyses could include: Energy plots : Tracking the total mechanical energy (kinetic + potential) over time to check for conservation. Orbital insertion analysis : Determining whether the payload is in a bound orbit or has escaped Earth\u2019s gravitational influence. Conclusion These visualizations help to better understand the motion of the payload under the influence of gravity. By examining the time evolution of position and velocity, phase space diagrams, and orbit visualizations, we can gain insights into the nature of the trajectory, whether elliptical, hyperbolic, or parabolic. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) EARTH_MASS = 5.972e24 # Mass of Earth (kg) EARTH_RADIUS = 6371e3 # Radius of Earth (m) # Initial position (on Earth's surface) initial_pos = np.array([EARTH_RADIUS, 0]) # Time span and evaluation points time_span = (0, 6000) # seconds time_eval = np.linspace(*time_span, 2000) # Initial velocities (m/s) and colors for plotting initial_velocities = [9000, 10000, 11000, 11200, 11250] colors = ['orange', 'tomato', 'deeppink', 'mediumslateblue', 'lightskyblue'] def gravity_ode(t, state): x, y, vx, vy = state r = np.sqrt(x**2 + y**2) ax = -G * EARTH_MASS * x / r**3 ay = -G * EARTH_MASS * y / r**3 return [vx, vy, ax, ay] # Plot setup fig, ax = plt.subplots(figsize=(8, 8)) for v0, color in zip(initial_velocities, colors): initial_state = [initial_pos[0], initial_pos[1], 0, v0] solution = solve_ivp(gravity_ode, time_span, initial_state, t_eval=time_eval, rtol=1e-8) x_km = solution.y[0] / 1000 # convert m to km y_km = solution.y[1] / 1000 ax.plot(x_km, y_km, color=color, linewidth=2, label=f'v = {v0} m/s') # Draw Earth earth = plt.Circle((0, 0), EARTH_RADIUS / 1000, color='cadetblue', alpha=0.4) ax.add_patch(earth) # Styling the plot ax.set_title(\"Near-Escape Velocity Trajectories\", fontsize=14) ax.set_xlabel(\"X Distance (km)\") ax.set_ylabel(\"Y Distance (km)\") ax.grid(True, linestyle='--', alpha=0.6) ax.set_aspect('equal', adjustable='box') ax.legend(loc='upper right') plt.tight_layout() plt.show() import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M = 5.972e24 # Mass of Earth (kg) R_earth = 6371e3 # Radius of Earth (m) altitude = 800e3 # Altitude of satellite (m) # Initial position r0 = R_earth + altitude x0 = r0 y0 = 0 # Time settings dt = 1 # Time step (s) t_max = 10000 # Total simulation time (s) steps = int(t_max / dt) # Initial velocity values (in m/s) velocities = np.arange(5e3, 13.5e3, 0.5e3) # Prepare figure plt.figure(figsize=(8, 8)) colors = plt.cm.tab20(np.linspace(0, 1, len(velocities))) # Run simulation for each velocity for idx, v0 in enumerate(velocities): # Initial conditions x, y = x0, y0 vx, vy = 0, v0 x_vals, y_vals = [x], [y] for _ in range(steps): r = np.sqrt(x**2 + y**2) ax = -G * M * x / r**3 ay = -G * M * y / r**3 vx += ax * dt vy += ay * dt x += vx * dt y += vy * dt x_vals.append(x) y_vals.append(y) # Stop if it crashes into Earth if np.sqrt(x**2 + y**2) < R_earth: break # Plot trajectory plt.plot(np.array(x_vals)/1e3, np.array(y_vals)/1e3, color=colors[idx], label=f\"{v0/1e3:.1f} km/s\", lw=1) # Plot Earth earth = plt.Circle((0, 0), R_earth/1e3, color='blue', label='Earth') plt.gca().add_patch(earth) # Plot settings plt.xlim(-2e4, 2e4) plt.ylim(-2e4, 2e4) plt.xlabel(\"X position (km)\") plt.ylabel(\"Y position (km)\") plt.title(\"Trajectories from 800 km altitude with various initial velocities\") plt.grid(True) plt.gca().set_aspect('equal') plt.legend(fontsize=8, loc='best') plt.tight_layout() plt.show() Real-World Applications Relevance to Space Missions and Satellite Deployment The study of payload trajectories is essential for various space missions, particularly those involving satellite deployment, payload release, or reentry. The trajectory analysis helps in determining: Orbital Insertion : The process of placing a satellite into orbit requires a precise calculation of the velocity and trajectory, ensuring that the payload reaches the correct altitude and orbital velocity. Satellite Deployment : When deploying satellites from a spacecraft, the release velocity and angle must be carefully chosen to ensure that the satellite remains in orbit or follows the intended path. The velocity required for an object to maintain a stable orbit around Earth is determined by the following equation: $$ v = \\sqrt{\\frac{GM_E}{r}} $$ Where: - \\(G\\) is the gravitational constant, \\(M_E\\) is Earth's mass, \\(r\\) is the orbital radius (distance from Earth's center). The altitude at which the payload is released, and its initial velocity, are critical for the success of satellite deployment. If the velocity is too low, the satellite will fall back to Earth. If the velocity is too high, the satellite may escape Earth's gravity. Reentry Strategies Reentry into Earth's atmosphere requires precise control of the payload's trajectory to ensure it slows down enough to avoid burning up due to friction. The conditions for reentry are influenced by: Orbital Decay : Over time, satellites in low Earth orbit experience atmospheric drag, which causes their orbits to decay, eventually leading to reentry. Reentry Angle : The angle at which a spacecraft reenters the atmosphere affects the amount of heat and stress it experiences. A shallow reentry angle may cause the spacecraft to skip off the atmosphere, while a steep angle may lead to rapid deceleration and heat buildup. The critical speed required to escape Earth's gravity is called the escape velocity , and is given by: \\[ v_{esc} = \\sqrt{\\frac{2GM_E}{r}} \\] Where: - \\(v_{esc}\\) is the escape velocity, \\(G\\) is the gravitational constant, \\(M_E\\) is Earth's mass, \\(r\\) is the distance from Earth's center. The altitude at which the payload is released, and its initial velocity, are critical for the success of satellite deployment. If the velocity is too low, the satellite will fall back to Earth. If the velocity is too high, the satellite may escape Earth's gravity. Reentry Strategies Reentry into Earth's atmosphere requires precise control of the payload's trajectory to ensure it slows down enough to avoid burning up due to friction. The conditions for reentry are influenced by: Orbital Decay : Over time, satellites in low Earth orbit experience atmospheric drag, which causes their orbits to decay, eventually leading to reentry. Reentry Angle : The angle at which a spacecraft reenters the atmosphere affects the amount of heat and stress it experiences. A shallow reentry angle may cause the spacecraft to skip off the atmosphere, while a steep angle may lead to rapid deceleration and heat buildup. The critical speed required to escape Earth's gravity is called the escape velocity , and is given by: \\[ v_{esc} = \\sqrt{\\frac{2GM_E}{r}} \\] Where: - \\(v_{esc}\\) is the escape velocity, \\(G\\) is the gravitational constant, \\(M_E\\) is Earth's mass, \\(r\\) is the distance from Earth's center. The concepts of escape velocity, orbital insertion, and trajectory analysis are foundational in space exploration and satellite deployment. Understanding these principles allows for the successful launch, deployment, and reentry of payloads, making them vital for future space missions, including Mars exploration, lunar missions, and the growing field of satellite-based communications and earth observation.","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#theoretical-foundation","text":"","title":"Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#newtons-law-of-gravitation","text":"Newton's Law of Universal Gravitation states that any two masses in the universe attract each other with a force given by: \\[F=G\\frac{m_1m_2}{r^2}\\] where: - \\(F\\) is the gravitational force, \\(G\\) is the gravitational constant ( \\(6.674\\times10^{-11}\\) m\u00b2/kg\u00b2) \\(m_1,m_2\\) are the masses of the two objects, \\(r\\) is the distance between the objects. For a payload near Earth, the force simplifies to: \\[F=G\\frac{M_Em}{r^2}\\] where \\(M_E\\) is Earth's mass and \\(r\\) is the distance from Earth's center. The acceleration due to gravity is: \\[g=\\frac{GM_E}{r^2}\\] which varies with altitude.","title":"Newton\u2019s Law of Gravitation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#keplers-laws-of-planetary-motion","text":"First Law (Elliptical Orbits) : Planets move in ellipses with the Sun at one focus. Similarly, a payload follows an elliptical, parabolic, or hyperbolic path based on its initial velocity. Second Law (Equal Areas in Equal Time) : The line joining a planet and the Sun sweeps equal areas in equal time. This implies that an object moves faster when closer to Earth. Third Law (Orbital Period Relation) : The square of a planet\u2019s orbital period is proportional to the cube of the semi-major axis: \\[T^2\\propto a^3\\] This helps in predicting orbital parameters.","title":"Kepler\u2019s Laws of Planetary Motion"},{"location":"1%20Physics/2%20Gravity/Problem_3/#classification-of-possible-trajectories","text":"The motion of a payload depends on its total energy: \\[E=\\frac{1}{2}mv^2-\\frac{GM_Em}{r}\\] If \\(E<0\\) \u2192 Elliptical orbit (Bound motion) If \\(E=0\\) \u2192 Parabolic trajectory (Escape condition) If \\(E>0\\) \u2192 Hyperbolic trajectory (Unbound motion) The escape velocity is given by: \\[v_{esc}=\\sqrt{\\frac{2GM_E}{r}}\\]","title":"Classification of Possible Trajectories"},{"location":"1%20Physics/2%20Gravity/Problem_3/#conditions-for-orbital-insertion-reentry-or-escape","text":"Orbital Insertion : Requires achieving a velocity that results in a stable bound orbit. For a circular orbit at altitude \\(h\\) : \\[v_{orbit}=\\sqrt{\\frac{GM_E}{R_E+h}}\\] Reentry Conditions : A payload must reduce velocity to enter the atmosphere. Atmospheric drag plays a key role in slowing it down. Escape Trajectories : If velocity exceeds escape velocity, the payload follows a hyperbolic trajectory away from Earth.","title":"Conditions for Orbital Insertion, Reentry, or Escape"},{"location":"1%20Physics/2%20Gravity/Problem_3/#this-theoretical-background-lays-the-foundation-for-numerical-simulations-of-payload-trajectories","text":"","title":"This theoretical background lays the foundation for numerical simulations of payload trajectories."},{"location":"1%20Physics/2%20Gravity/Problem_3/#mathematical-formulation","text":"","title":"Mathematical Formulation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#equations-of-motion-for-a-payload-under-earths-gravity","text":"The motion of a payload is governed by Newton\u2019s Second Law: \\[F=ma\\] Since the only force acting is gravity: \\[m\\frac{d^2\\mathbf{r}}{dt^2}=-G\\frac{M_Em}{r^2}\\hat{r}\\] Simplifying: \\( \\(\\frac{d^2\\mathbf{r}}{dt^2}=-G\\frac{M_E}{r^2}\\hat{r}\\) \\) - In Cartesian coordinates: \\[\\frac{d^2x}{dt^2}=-G\\frac{M_E}{r^3}x\\] \\[\\frac{d^2y}{dt^2}=-G\\frac{M_E}{r^3}y\\] \\[\\frac{d^2z}{dt^2}=-G\\frac{M_E}{r^3}z\\] where \\(r=\\sqrt{x^2+y^2+z^2}\\) .","title":"Equations of Motion for a Payload under Earth's Gravity"},{"location":"1%20Physics/2%20Gravity/Problem_3/#consideration-of-initial-velocity-altitude-and-direction","text":"Initial position: \\[\\mathbf{r_0}=(x_0,y_0,z_0)\\] Initial velocity: \\[\\mathbf{v_0}=(v_{x0},v_{y0},v_{z0})\\] The trajectory depends on: Magnitude and direction of \\(\\mathbf{v_0}\\) . The altitude ( \\(h\\) ) from the Earth's surface: \\[r_0=R_E+h\\]","title":"Consideration of Initial Velocity, Altitude, and Direction"},{"location":"1%20Physics/2%20Gravity/Problem_3/#criteria-for-different-trajectories","text":"The total specific energy determines the trajectory: \\( \\(E=\\frac{1}{2}v^2-\\frac{GM_E}{r}\\) \\) If \\(E<0\\) : Elliptical orbit (Bound motion) If \\(E=0\\) : Parabolic trajectory (Escape condition) If \\(E>0\\) : Hyperbolic trajectory (Unbound motion) Escape velocity condition: \\[v_0\\geq\\sqrt{\\frac{2GM_E}{r_0}}\\] ensures that the payload escapes Earth's gravitational influence.","title":"Criteria for Different Trajectories"},{"location":"1%20Physics/2%20Gravity/Problem_3/#this-mathematical-formulation-establishes-the-foundation-for-numerical-simulations-of-payload-motion","text":"","title":"This mathematical formulation establishes the foundation for numerical simulations of payload motion."},{"location":"1%20Physics/2%20Gravity/Problem_3/#numerical-simulation","text":"","title":"Numerical Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#implement-a-python-script-to-solve-the-equations-of-motion","text":"We solve the equations of motion numerically using an appropriate method such as the Runge-Kutta method. The equations of motion are: \\[ m \\frac{d^2 \\mathbf{r}}{dt^2} = - G \\frac{M_E m}{r^2} \\hat{r} \\] This simplifies to: $$ \\frac{d^2 \\mathbf{r}}{dt^2} = - G \\frac{M_E}{r^2} \\hat{r} $$ To implement this, we break it down into first-order differential equations by defining velocity as: \\[ \\mathbf{v} = \\frac{d \\mathbf{r}}{dt} \\] Thus, we can write the system of equations as: \\[ \\frac{d \\mathbf{r}}{dt} = \\mathbf{v} \\] \\[ \\frac{d \\mathbf{v}}{dt} = - G \\frac{M_E}{r^2} \\hat{r} \\]","title":"Implement a Python Script to Solve the Equations of Motion"},{"location":"1%20Physics/2%20Gravity/Problem_3/#use-numerical-methods-eg-runge-kutta-for-trajectory-calculations","text":"The Runge-Kutta method is an efficient and accurate way to numerically solve these differential equations. The fourth-order Runge-Kutta method (RK4) is commonly used for its balance between complexity and accuracy. Let the system of differential equations be represented as: \\[ \\mathbf{r}' = \\mathbf{v} \\] \\[ \\mathbf{v}' = - G \\frac{M_E}{r^2} \\hat{r} \\] The Runge-Kutta method will numerically integrate these equations step-by-step, providing the trajectory of the payload over time.","title":"Use Numerical Methods (e.g., Runge-Kutta) for Trajectory Calculations"},{"location":"1%20Physics/2%20Gravity/Problem_3/#account-for-different-initial-conditions","text":"We consider various initial conditions, such as: Initial position: \\[ \\mathbf{r_0} = (x_0, y_0, z_0) \\] Initial velocity: \\[ \\mathbf{v_0} = (v_{x0}, v_{y0}, v_{z0}) \\] The trajectory depends on the magnitude and direction of the initial velocity and the altitude: \\[ r_0 = R_E + h \\]","title":"Account for Different Initial Conditions"},{"location":"1%20Physics/2%20Gravity/Problem_3/#python-implementation","text":"The following Python code can be used to solve these equations using the Runge-Kutta method: import numpy as np import matplotlib.pyplot as plt # Earth's radius (m) R = 6.371e6 # Earth's circle (smoothed for visualization) theta = np.linspace(0, 2 * np.pi, 1000) earth_x = R * np.cos(theta) earth_y = R * np.sin(theta) # Ascending elliptical orbit path theta_traj = np.linspace(0, np.pi / 1.3, 400) trajectory_x = R * np.cos(theta_traj) trajectory_y = 1.1 * R * np.sin(theta_traj) + 0.3 * R # Higher and farther # Create the plot plt.figure(figsize=(8, 8)) plt.fill(earth_x, earth_y, color='deepskyblue', alpha=0.7, label='Earth') plt.plot(trajectory_x, trajectory_y, color='crimson', linewidth=2.5, linestyle='-', label='Rocket Trajectory') # Labels and title plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Launch Trajectory from Earth\", fontsize=14) plt.axis('equal') plt.grid(True, linestyle='--', alpha=0.5) plt.legend() plt.tight_layout() plt.show()","title":"Python Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#visualization-analysis","text":"","title":"Visualization &amp; Analysis"},{"location":"1%20Physics/2%20Gravity/Problem_3/#generate-plots-for-various-payload-trajectories","text":"To visualize the payload's motion, we generate several plots that help analyze the behavior of the trajectory. The primary visualizations include: Time evolution of position and velocity. Phase space diagrams. Orbit visualizations.","title":"Generate Plots for Various Payload Trajectories"},{"location":"1%20Physics/2%20Gravity/Problem_3/#time-evolution-of-position-and-velocity","text":"We can plot the time evolution of the payload's position and velocity over time to understand how they change as the payload moves under Earth's gravitational influence.","title":"Time Evolution of Position and Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_3/#phase-space-diagrams","text":"A phase space diagram shows the relationship between position and velocity. For a two-dimensional system, we can plot the position in the x-direction versus the velocity in the x-direction, and similarly for the y and z components.","title":"Phase Space Diagrams"},{"location":"1%20Physics/2%20Gravity/Problem_3/#orbit-visualizations","text":"We can visualize the payload's orbit as it moves through space. This plot will show the path in 3D space, displaying the orbital trajectory relative to Earth.","title":"Orbit Visualizations"},{"location":"1%20Physics/2%20Gravity/Problem_3/#additional-analysis","text":"In addition to the plots above, other analyses could include: Energy plots : Tracking the total mechanical energy (kinetic + potential) over time to check for conservation. Orbital insertion analysis : Determining whether the payload is in a bound orbit or has escaped Earth\u2019s gravitational influence.","title":"Additional Analysis"},{"location":"1%20Physics/2%20Gravity/Problem_3/#conclusion","text":"These visualizations help to better understand the motion of the payload under the influence of gravity. By examining the time evolution of position and velocity, phase space diagrams, and orbit visualizations, we can gain insights into the nature of the trajectory, whether elliptical, hyperbolic, or parabolic. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) EARTH_MASS = 5.972e24 # Mass of Earth (kg) EARTH_RADIUS = 6371e3 # Radius of Earth (m) # Initial position (on Earth's surface) initial_pos = np.array([EARTH_RADIUS, 0]) # Time span and evaluation points time_span = (0, 6000) # seconds time_eval = np.linspace(*time_span, 2000) # Initial velocities (m/s) and colors for plotting initial_velocities = [9000, 10000, 11000, 11200, 11250] colors = ['orange', 'tomato', 'deeppink', 'mediumslateblue', 'lightskyblue'] def gravity_ode(t, state): x, y, vx, vy = state r = np.sqrt(x**2 + y**2) ax = -G * EARTH_MASS * x / r**3 ay = -G * EARTH_MASS * y / r**3 return [vx, vy, ax, ay] # Plot setup fig, ax = plt.subplots(figsize=(8, 8)) for v0, color in zip(initial_velocities, colors): initial_state = [initial_pos[0], initial_pos[1], 0, v0] solution = solve_ivp(gravity_ode, time_span, initial_state, t_eval=time_eval, rtol=1e-8) x_km = solution.y[0] / 1000 # convert m to km y_km = solution.y[1] / 1000 ax.plot(x_km, y_km, color=color, linewidth=2, label=f'v = {v0} m/s') # Draw Earth earth = plt.Circle((0, 0), EARTH_RADIUS / 1000, color='cadetblue', alpha=0.4) ax.add_patch(earth) # Styling the plot ax.set_title(\"Near-Escape Velocity Trajectories\", fontsize=14) ax.set_xlabel(\"X Distance (km)\") ax.set_ylabel(\"Y Distance (km)\") ax.grid(True, linestyle='--', alpha=0.6) ax.set_aspect('equal', adjustable='box') ax.legend(loc='upper right') plt.tight_layout() plt.show() import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M = 5.972e24 # Mass of Earth (kg) R_earth = 6371e3 # Radius of Earth (m) altitude = 800e3 # Altitude of satellite (m) # Initial position r0 = R_earth + altitude x0 = r0 y0 = 0 # Time settings dt = 1 # Time step (s) t_max = 10000 # Total simulation time (s) steps = int(t_max / dt) # Initial velocity values (in m/s) velocities = np.arange(5e3, 13.5e3, 0.5e3) # Prepare figure plt.figure(figsize=(8, 8)) colors = plt.cm.tab20(np.linspace(0, 1, len(velocities))) # Run simulation for each velocity for idx, v0 in enumerate(velocities): # Initial conditions x, y = x0, y0 vx, vy = 0, v0 x_vals, y_vals = [x], [y] for _ in range(steps): r = np.sqrt(x**2 + y**2) ax = -G * M * x / r**3 ay = -G * M * y / r**3 vx += ax * dt vy += ay * dt x += vx * dt y += vy * dt x_vals.append(x) y_vals.append(y) # Stop if it crashes into Earth if np.sqrt(x**2 + y**2) < R_earth: break # Plot trajectory plt.plot(np.array(x_vals)/1e3, np.array(y_vals)/1e3, color=colors[idx], label=f\"{v0/1e3:.1f} km/s\", lw=1) # Plot Earth earth = plt.Circle((0, 0), R_earth/1e3, color='blue', label='Earth') plt.gca().add_patch(earth) # Plot settings plt.xlim(-2e4, 2e4) plt.ylim(-2e4, 2e4) plt.xlabel(\"X position (km)\") plt.ylabel(\"Y position (km)\") plt.title(\"Trajectories from 800 km altitude with various initial velocities\") plt.grid(True) plt.gca().set_aspect('equal') plt.legend(fontsize=8, loc='best') plt.tight_layout() plt.show()","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_3/#real-world-applications","text":"","title":"Real-World Applications"},{"location":"1%20Physics/2%20Gravity/Problem_3/#relevance-to-space-missions-and-satellite-deployment","text":"The study of payload trajectories is essential for various space missions, particularly those involving satellite deployment, payload release, or reentry. The trajectory analysis helps in determining: Orbital Insertion : The process of placing a satellite into orbit requires a precise calculation of the velocity and trajectory, ensuring that the payload reaches the correct altitude and orbital velocity. Satellite Deployment : When deploying satellites from a spacecraft, the release velocity and angle must be carefully chosen to ensure that the satellite remains in orbit or follows the intended path. The velocity required for an object to maintain a stable orbit around Earth is determined by the following equation: $$ v = \\sqrt{\\frac{GM_E}{r}} $$ Where: - \\(G\\) is the gravitational constant, \\(M_E\\) is Earth's mass, \\(r\\) is the orbital radius (distance from Earth's center). The altitude at which the payload is released, and its initial velocity, are critical for the success of satellite deployment. If the velocity is too low, the satellite will fall back to Earth. If the velocity is too high, the satellite may escape Earth's gravity.","title":"Relevance to Space Missions and Satellite Deployment"},{"location":"1%20Physics/2%20Gravity/Problem_3/#reentry-strategies","text":"Reentry into Earth's atmosphere requires precise control of the payload's trajectory to ensure it slows down enough to avoid burning up due to friction. The conditions for reentry are influenced by: Orbital Decay : Over time, satellites in low Earth orbit experience atmospheric drag, which causes their orbits to decay, eventually leading to reentry. Reentry Angle : The angle at which a spacecraft reenters the atmosphere affects the amount of heat and stress it experiences. A shallow reentry angle may cause the spacecraft to skip off the atmosphere, while a steep angle may lead to rapid deceleration and heat buildup. The critical speed required to escape Earth's gravity is called the escape velocity , and is given by: \\[ v_{esc} = \\sqrt{\\frac{2GM_E}{r}} \\] Where: - \\(v_{esc}\\) is the escape velocity, \\(G\\) is the gravitational constant, \\(M_E\\) is Earth's mass, \\(r\\) is the distance from Earth's center. The altitude at which the payload is released, and its initial velocity, are critical for the success of satellite deployment. If the velocity is too low, the satellite will fall back to Earth. If the velocity is too high, the satellite may escape Earth's gravity.","title":"Reentry Strategies"},{"location":"1%20Physics/2%20Gravity/Problem_3/#reentry-strategies_1","text":"Reentry into Earth's atmosphere requires precise control of the payload's trajectory to ensure it slows down enough to avoid burning up due to friction. The conditions for reentry are influenced by: Orbital Decay : Over time, satellites in low Earth orbit experience atmospheric drag, which causes their orbits to decay, eventually leading to reentry. Reentry Angle : The angle at which a spacecraft reenters the atmosphere affects the amount of heat and stress it experiences. A shallow reentry angle may cause the spacecraft to skip off the atmosphere, while a steep angle may lead to rapid deceleration and heat buildup. The critical speed required to escape Earth's gravity is called the escape velocity , and is given by: \\[ v_{esc} = \\sqrt{\\frac{2GM_E}{r}} \\] Where: - \\(v_{esc}\\) is the escape velocity, \\(G\\) is the gravitational constant, \\(M_E\\) is Earth's mass, \\(r\\) is the distance from Earth's center. The concepts of escape velocity, orbital insertion, and trajectory analysis are foundational in space exploration and satellite deployment. Understanding these principles allows for the successful launch, deployment, and reentry of payloads, making them vital for future space missions, including Mars exploration, lunar missions, and the growing field of satellite-based communications and earth observation.","title":"Reentry Strategies"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1 Wave Interference Patterns on a Water Surface 1. Selecting a Regular Polygon Introduction In wave physics, interference occurs when two or more waves overlap, resulting in regions of constructive and destructive interference. To systematically analyze these patterns, we consider multiple point wave sources positioned at the vertices of a regular polygon . This setup allows us to explore how symmetric arrangements of sources influence the resulting wave field. Mathematical Definition of a Regular Polygon A regular polygon with \\(N\\) sides is a closed geometric figure where all sides are of equal length and all internal angles are equal. The vertices of such a polygon, when inscribed in a circle of radius \\(R\\) , can be determined using trigonometric functions. For a polygon centered at the origin, the coordinates of the \\(i\\) -th vertex are given by: \\[x_i=R\\cos\\left(\\frac{2\\pi i}{N}\\right),\\quad y_i=R\\sin\\left(\\frac{2\\pi i}{N}\\right),\\quad i=0,1,2,\\dots,N-1\\] where: - \\(R\\) is the circumradius of the polygon, \\(N\\) is the number of sides (hence, the number of sources), \\(i\\) indexes the vertices counterclockwise starting from an initial reference point. Choosing the Regular Polygon The choice of \\(N\\) influences the symmetry of the interference pattern. Common selections include: Equilateral Triangle ( \\(N=3\\) ) : Yields a threefold symmetric interference pattern. Square ( \\(N=4\\) ) : Produces a fourfold symmetric pattern with central and diagonal wave reinforcements. Pentagon ( \\(N=5\\) ) : Generates more complex wave interactions with fivefold rotational symmetry. Hexagon ( \\(N=6\\) ) : Approximates circular symmetry while retaining noticeable interference fringes. 2. Positioning the Sources Determining the Coordinates of the Polygonal Vertices To systematically analyze interference, we must precisely position the wave sources at the vertices of a chosen regular polygon. Given a polygon inscribed within a circle of radius \\(R\\) , the coordinates of its vertices are: \\[x_i=R\\cos\\left(\\frac{2\\pi i}{N}\\right),\\quad y_i=R\\sin\\left(\\frac{2\\pi i}{N}\\right),\\quad i=0,1,2,\\dots,N-1\\] Assigning Each Vertex as a Wave Source Each vertex serves as a point source emitting circular waves with identical amplitude and frequency. The total wave field results from the superposition of these waves. Each wave propagates outward from its source with a displacement function: \\[\\eta_i(x,y,t)=\\frac{A}{r_i}\\cos\\left(kr_i-\\omega t+\\phi_i\\right)\\] where: \\(r_i=\\sqrt{(x-x_i)^2+(y-y_i)^2}\\) is the radial distance to the observation point. 3. Defining the Wave Equations Mathematical Representation of Wave Motion Each wave emitted from a point source follows the equation: \\[\\eta_i(x,y,t)=\\frac{A}{r_i}\\cos\\left(kr_i-\\omega t+\\phi_i\\right)\\] where: \\(A\\) is the amplitude, \\(k=\\frac{2\\pi}{\\lambda}\\) is the wave number, \\(\\omega=2\\pi f\\) is the angular frequency, \\(\\phi_i\\) is the phase, \\(r_i\\) is the radial distance from the \\(i\\) -th source. Uniformity Assumptions To maintain coherence in interference analysis, we assume: All waves have the same amplitude , i.e., \\(A\\) is constant. All waves have the same wavelength \\(\\lambda\\) and frequency \\(f\\) . Initial phase differences between sources remain fixed. 4. Applying the Superposition Principle Summation of Wave Displacements According to the principle of superposition, the resultant displacement at any point on the water surface is the sum of individual wave contributions: \\[\\eta_{\\text{sum}}(x,y,t)=\\sum_{i=1}^{N}\\eta_i(x,y,t)\\] This summation captures constructive and destructive interference effects. Constructive and Destructive Interference Conditions Constructive interference: Occurs when phase differences satisfy: \\[kr_i-\\omega t+\\phi_i=2m\\pi,\\quad m\\in\\mathbb{Z}\\] Destructive interference: Occurs when phase differences satisfy: \\[kr_i-\\omega t+\\phi_i=(2m+1)\\pi,\\quad m\\in\\mathbb{Z}\\] 5. Analyzing the Interference Patterns Identifying Interference Zones By computing \\(\\eta_{\\text{sum}}(x,y,t)\\) , we can classify different regions: - High amplitude zones: Result from constructive interference. - Low amplitude zones: Result from destructive interference. Temporal Evolution of the Pattern As time progresses, the interference pattern evolves dynamically, influenced by wave frequency and phase differences. 6. Visualization and Simulation Graphical Representations Using numerical simulations, we generate: - Static interference maps for different polygons. - Time-evolving wave fields to observe changing interference dynamics. Python Implementation A Python script implementing the above equations will: 1. Define wave parameters. 2. Compute the interference pattern on a 2D grid. 3. Visualize results using heatmaps and contour plots. The next step is to implement and analyze these interference patterns computationally. import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D # Create spatial grid x_vals = np.linspace(-10, 10, 500) y_vals = np.linspace(-10, 10, 500) X, Y = np.meshgrid(x_vals, y_vals) # Wave parameters wavelength = 2.0 # Wavelength in units wave_number = 2 * np.pi / wavelength # Wave number k angular_freq = 2 * np.pi / 5 # Angular frequency \u03c9 time = 0 # Time snapshot (static) # Generate wave pattern from a single point source def wave_from_source(X, Y, source_pos): distance = np.sqrt((X - source_pos[0])**2 + (Y - source_pos[1])**2) return np.sin(wave_number * distance - angular_freq * time) # Superpose waves from multiple sources def combined_wave(X, Y, source_positions): total_wave = np.zeros_like(X) for pos in source_positions: total_wave += wave_from_source(X, Y, pos) return total_wave # Define source positions single_source = [(0, 0)] square_distance = 5 four_sources_square = [ (-square_distance, -square_distance), (-square_distance, square_distance), ( square_distance, -square_distance), ( square_distance, square_distance) ] pentagon_radius = 5 pentagon_angles = np.linspace(0, 2 * np.pi, 6)[:-1] # 5 points equally spaced five_sources_pentagon = [(pentagon_radius * np.cos(a), pentagon_radius * np.sin(a)) for a in pentagon_angles] # Plotting function for heatmap and 3D surface def plot_wave_pattern(Z, plot_title): fig, axs = plt.subplots(1, 2, figsize=(18, 8)) # Heatmap view heatmap = axs[0].imshow(Z, extent=[-10, 10, -10, 10], origin='lower', cmap='viridis') axs[0].set_title(f\"{plot_title} - Heatmap\", fontsize=18) axs[0].set_xlabel(\"X axis\", fontsize=14) axs[0].set_ylabel(\"Y axis\", fontsize=14) plt.colorbar(heatmap, ax=axs[0]) # 3D surface plot ax3d = fig.add_subplot(1, 2, 2, projection='3d') ax3d.plot_surface(X, Y, Z, cmap='viridis', edgecolor='none') ax3d.set_title(f\"{plot_title} - 3D Surface\", fontsize=18) ax3d.set_xlabel(\"X axis\", fontsize=14) ax3d.set_ylabel(\"Y axis\", fontsize=14) ax3d.set_zlabel(\"Amplitude\", fontsize=14) plt.tight_layout() plt.show() # Compute wave patterns for each source arrangement Z_single = combined_wave(X, Y, single_source) Z_four = combined_wave(X, Y, four_sources_square) Z_five = combined_wave(X, Y, five_sources_pentagon) # Plot all results plot_wave_pattern(Z_single, \"Single Source\") plot_wave_pattern(Z_four, \"Four Sources (Square Arrangement)\") plot_wave_pattern(Z_five, \"Five Sources (Pentagon Arrangement)\") GIF CODES import numpy as np import matplotlib.pyplot as plt import imageio # Define the grid x = np.linspace(-10, 10, 500) y = np.linspace(-10, 10, 500) X, Y = np.meshgrid(x, y) # Define wave parameters wavelength = 2 # Wavelength k = 2 * np.pi / wavelength # Wave number omega = 2 * np.pi / 5 # Angular frequency # Function to create a wave from a single source def single_wave(X, Y, source, t): r = np.sqrt((X - source[0])**2 + (Y - source[1])**2) return np.sin(k * r - omega * t) # Function to sum multiple waves from different sources def multiple_waves(X, Y, sources, t): Z = np.zeros_like(X) for source in sources: Z += single_wave(X, Y, source, t) return Z # Sources definitions for 5 sources (in a pentagon) radius = 5 angles = np.linspace(0, 2 * np.pi, 6)[:-1] sources_5 = [(radius * np.cos(a), radius * np.sin(a)) for a in angles] # Create GIF frames num_frames = 100 gif_frames = [] # Create the GIF frames for time from 0 to 2*pi for i in range(num_frames): t = i * 2 * np.pi / num_frames # Varying time Z = multiple_waves(X, Y, sources_5, t) # Plotting the frame fig, ax = plt.subplots(figsize=(8, 6)) im = ax.imshow(Z, extent=[-10, 10, -10, 10], origin='lower', cmap='viridis', animated=True) ax.set_title(f\"Interference of 5 Sources - Time = {t:.2f}\", fontsize=16) ax.set_xlabel('X axis', fontsize=14) ax.set_ylabel('Y axis', fontsize=14) plt.colorbar(im, ax=ax) # Ensure proper rendering plt.tight_layout() # Draw the figure to make sure it's rendered correctly before saving fig.canvas.draw() # Convert to image and append to GIF frames gif_frames.append(np.array(fig.canvas.renderer.buffer_rgba())) # Close the plot to avoid memory issues in the loop plt.close(fig) # Create and save the GIF imageio.mimsave('interference_5_sources.gif', gif_frames, duration=0.1) print(\"GIF saved as 'interference_5_sources.gif'\") link","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#wave-interference-patterns-on-a-water-surface","text":"","title":"Wave Interference Patterns on a Water Surface"},{"location":"1%20Physics/3%20Waves/Problem_1/#1-selecting-a-regular-polygon","text":"","title":"1. Selecting a Regular Polygon"},{"location":"1%20Physics/3%20Waves/Problem_1/#introduction","text":"In wave physics, interference occurs when two or more waves overlap, resulting in regions of constructive and destructive interference. To systematically analyze these patterns, we consider multiple point wave sources positioned at the vertices of a regular polygon . This setup allows us to explore how symmetric arrangements of sources influence the resulting wave field.","title":"Introduction"},{"location":"1%20Physics/3%20Waves/Problem_1/#mathematical-definition-of-a-regular-polygon","text":"A regular polygon with \\(N\\) sides is a closed geometric figure where all sides are of equal length and all internal angles are equal. The vertices of such a polygon, when inscribed in a circle of radius \\(R\\) , can be determined using trigonometric functions. For a polygon centered at the origin, the coordinates of the \\(i\\) -th vertex are given by: \\[x_i=R\\cos\\left(\\frac{2\\pi i}{N}\\right),\\quad y_i=R\\sin\\left(\\frac{2\\pi i}{N}\\right),\\quad i=0,1,2,\\dots,N-1\\] where: - \\(R\\) is the circumradius of the polygon, \\(N\\) is the number of sides (hence, the number of sources), \\(i\\) indexes the vertices counterclockwise starting from an initial reference point.","title":"Mathematical Definition of a Regular Polygon"},{"location":"1%20Physics/3%20Waves/Problem_1/#choosing-the-regular-polygon","text":"The choice of \\(N\\) influences the symmetry of the interference pattern. Common selections include: Equilateral Triangle ( \\(N=3\\) ) : Yields a threefold symmetric interference pattern. Square ( \\(N=4\\) ) : Produces a fourfold symmetric pattern with central and diagonal wave reinforcements. Pentagon ( \\(N=5\\) ) : Generates more complex wave interactions with fivefold rotational symmetry. Hexagon ( \\(N=6\\) ) : Approximates circular symmetry while retaining noticeable interference fringes.","title":"Choosing the Regular Polygon"},{"location":"1%20Physics/3%20Waves/Problem_1/#2-positioning-the-sources","text":"","title":"2. Positioning the Sources"},{"location":"1%20Physics/3%20Waves/Problem_1/#determining-the-coordinates-of-the-polygonal-vertices","text":"To systematically analyze interference, we must precisely position the wave sources at the vertices of a chosen regular polygon. Given a polygon inscribed within a circle of radius \\(R\\) , the coordinates of its vertices are: \\[x_i=R\\cos\\left(\\frac{2\\pi i}{N}\\right),\\quad y_i=R\\sin\\left(\\frac{2\\pi i}{N}\\right),\\quad i=0,1,2,\\dots,N-1\\]","title":"Determining the Coordinates of the Polygonal Vertices"},{"location":"1%20Physics/3%20Waves/Problem_1/#assigning-each-vertex-as-a-wave-source","text":"Each vertex serves as a point source emitting circular waves with identical amplitude and frequency. The total wave field results from the superposition of these waves. Each wave propagates outward from its source with a displacement function: \\[\\eta_i(x,y,t)=\\frac{A}{r_i}\\cos\\left(kr_i-\\omega t+\\phi_i\\right)\\] where: \\(r_i=\\sqrt{(x-x_i)^2+(y-y_i)^2}\\) is the radial distance to the observation point.","title":"Assigning Each Vertex as a Wave Source"},{"location":"1%20Physics/3%20Waves/Problem_1/#3-defining-the-wave-equations","text":"","title":"3. Defining the Wave Equations"},{"location":"1%20Physics/3%20Waves/Problem_1/#mathematical-representation-of-wave-motion","text":"Each wave emitted from a point source follows the equation: \\[\\eta_i(x,y,t)=\\frac{A}{r_i}\\cos\\left(kr_i-\\omega t+\\phi_i\\right)\\] where: \\(A\\) is the amplitude, \\(k=\\frac{2\\pi}{\\lambda}\\) is the wave number, \\(\\omega=2\\pi f\\) is the angular frequency, \\(\\phi_i\\) is the phase, \\(r_i\\) is the radial distance from the \\(i\\) -th source.","title":"Mathematical Representation of Wave Motion"},{"location":"1%20Physics/3%20Waves/Problem_1/#uniformity-assumptions","text":"To maintain coherence in interference analysis, we assume: All waves have the same amplitude , i.e., \\(A\\) is constant. All waves have the same wavelength \\(\\lambda\\) and frequency \\(f\\) . Initial phase differences between sources remain fixed.","title":"Uniformity Assumptions"},{"location":"1%20Physics/3%20Waves/Problem_1/#4-applying-the-superposition-principle","text":"","title":"4. Applying the Superposition Principle"},{"location":"1%20Physics/3%20Waves/Problem_1/#summation-of-wave-displacements","text":"According to the principle of superposition, the resultant displacement at any point on the water surface is the sum of individual wave contributions: \\[\\eta_{\\text{sum}}(x,y,t)=\\sum_{i=1}^{N}\\eta_i(x,y,t)\\] This summation captures constructive and destructive interference effects.","title":"Summation of Wave Displacements"},{"location":"1%20Physics/3%20Waves/Problem_1/#constructive-and-destructive-interference-conditions","text":"Constructive interference: Occurs when phase differences satisfy: \\[kr_i-\\omega t+\\phi_i=2m\\pi,\\quad m\\in\\mathbb{Z}\\] Destructive interference: Occurs when phase differences satisfy: \\[kr_i-\\omega t+\\phi_i=(2m+1)\\pi,\\quad m\\in\\mathbb{Z}\\]","title":"Constructive and Destructive Interference Conditions"},{"location":"1%20Physics/3%20Waves/Problem_1/#5-analyzing-the-interference-patterns","text":"","title":"5. Analyzing the Interference Patterns"},{"location":"1%20Physics/3%20Waves/Problem_1/#identifying-interference-zones","text":"By computing \\(\\eta_{\\text{sum}}(x,y,t)\\) , we can classify different regions: - High amplitude zones: Result from constructive interference. - Low amplitude zones: Result from destructive interference.","title":"Identifying Interference Zones"},{"location":"1%20Physics/3%20Waves/Problem_1/#temporal-evolution-of-the-pattern","text":"As time progresses, the interference pattern evolves dynamically, influenced by wave frequency and phase differences.","title":"Temporal Evolution of the Pattern"},{"location":"1%20Physics/3%20Waves/Problem_1/#6-visualization-and-simulation","text":"","title":"6. Visualization and Simulation"},{"location":"1%20Physics/3%20Waves/Problem_1/#graphical-representations","text":"Using numerical simulations, we generate: - Static interference maps for different polygons. - Time-evolving wave fields to observe changing interference dynamics.","title":"Graphical Representations"},{"location":"1%20Physics/3%20Waves/Problem_1/#python-implementation","text":"A Python script implementing the above equations will: 1. Define wave parameters. 2. Compute the interference pattern on a 2D grid. 3. Visualize results using heatmaps and contour plots. The next step is to implement and analyze these interference patterns computationally. import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D # Create spatial grid x_vals = np.linspace(-10, 10, 500) y_vals = np.linspace(-10, 10, 500) X, Y = np.meshgrid(x_vals, y_vals) # Wave parameters wavelength = 2.0 # Wavelength in units wave_number = 2 * np.pi / wavelength # Wave number k angular_freq = 2 * np.pi / 5 # Angular frequency \u03c9 time = 0 # Time snapshot (static) # Generate wave pattern from a single point source def wave_from_source(X, Y, source_pos): distance = np.sqrt((X - source_pos[0])**2 + (Y - source_pos[1])**2) return np.sin(wave_number * distance - angular_freq * time) # Superpose waves from multiple sources def combined_wave(X, Y, source_positions): total_wave = np.zeros_like(X) for pos in source_positions: total_wave += wave_from_source(X, Y, pos) return total_wave # Define source positions single_source = [(0, 0)] square_distance = 5 four_sources_square = [ (-square_distance, -square_distance), (-square_distance, square_distance), ( square_distance, -square_distance), ( square_distance, square_distance) ] pentagon_radius = 5 pentagon_angles = np.linspace(0, 2 * np.pi, 6)[:-1] # 5 points equally spaced five_sources_pentagon = [(pentagon_radius * np.cos(a), pentagon_radius * np.sin(a)) for a in pentagon_angles] # Plotting function for heatmap and 3D surface def plot_wave_pattern(Z, plot_title): fig, axs = plt.subplots(1, 2, figsize=(18, 8)) # Heatmap view heatmap = axs[0].imshow(Z, extent=[-10, 10, -10, 10], origin='lower', cmap='viridis') axs[0].set_title(f\"{plot_title} - Heatmap\", fontsize=18) axs[0].set_xlabel(\"X axis\", fontsize=14) axs[0].set_ylabel(\"Y axis\", fontsize=14) plt.colorbar(heatmap, ax=axs[0]) # 3D surface plot ax3d = fig.add_subplot(1, 2, 2, projection='3d') ax3d.plot_surface(X, Y, Z, cmap='viridis', edgecolor='none') ax3d.set_title(f\"{plot_title} - 3D Surface\", fontsize=18) ax3d.set_xlabel(\"X axis\", fontsize=14) ax3d.set_ylabel(\"Y axis\", fontsize=14) ax3d.set_zlabel(\"Amplitude\", fontsize=14) plt.tight_layout() plt.show() # Compute wave patterns for each source arrangement Z_single = combined_wave(X, Y, single_source) Z_four = combined_wave(X, Y, four_sources_square) Z_five = combined_wave(X, Y, five_sources_pentagon) # Plot all results plot_wave_pattern(Z_single, \"Single Source\") plot_wave_pattern(Z_four, \"Four Sources (Square Arrangement)\") plot_wave_pattern(Z_five, \"Five Sources (Pentagon Arrangement)\")","title":"Python Implementation"},{"location":"1%20Physics/3%20Waves/Problem_1/#gif-codes","text":"import numpy as np import matplotlib.pyplot as plt import imageio # Define the grid x = np.linspace(-10, 10, 500) y = np.linspace(-10, 10, 500) X, Y = np.meshgrid(x, y) # Define wave parameters wavelength = 2 # Wavelength k = 2 * np.pi / wavelength # Wave number omega = 2 * np.pi / 5 # Angular frequency # Function to create a wave from a single source def single_wave(X, Y, source, t): r = np.sqrt((X - source[0])**2 + (Y - source[1])**2) return np.sin(k * r - omega * t) # Function to sum multiple waves from different sources def multiple_waves(X, Y, sources, t): Z = np.zeros_like(X) for source in sources: Z += single_wave(X, Y, source, t) return Z # Sources definitions for 5 sources (in a pentagon) radius = 5 angles = np.linspace(0, 2 * np.pi, 6)[:-1] sources_5 = [(radius * np.cos(a), radius * np.sin(a)) for a in angles] # Create GIF frames num_frames = 100 gif_frames = [] # Create the GIF frames for time from 0 to 2*pi for i in range(num_frames): t = i * 2 * np.pi / num_frames # Varying time Z = multiple_waves(X, Y, sources_5, t) # Plotting the frame fig, ax = plt.subplots(figsize=(8, 6)) im = ax.imshow(Z, extent=[-10, 10, -10, 10], origin='lower', cmap='viridis', animated=True) ax.set_title(f\"Interference of 5 Sources - Time = {t:.2f}\", fontsize=16) ax.set_xlabel('X axis', fontsize=14) ax.set_ylabel('Y axis', fontsize=14) plt.colorbar(im, ax=ax) # Ensure proper rendering plt.tight_layout() # Draw the figure to make sure it's rendered correctly before saving fig.canvas.draw() # Convert to image and append to GIF frames gif_frames.append(np.array(fig.canvas.renderer.buffer_rgba())) # Close the plot to avoid memory issues in the loop plt.close(fig) # Create and save the GIF imageio.mimsave('interference_5_sources.gif', gif_frames, duration=0.1) print(\"GIF saved as 'interference_5_sources.gif'\") link","title":"GIF CODES"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}